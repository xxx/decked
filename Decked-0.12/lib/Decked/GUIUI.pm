#!/usr/bin/perl -w
#
# This is the (re)generated UI construction class.
#
# DO NOT EDIT THIS FILE, ANY CHANGES THAT YOU MAKE WILL BE LOST WHEN
# THIS FILE WILL BE OVERWRITTEN BY THE NEXT RUN OF Glade::PerlGenerate
#
#==============================================================================
#=== This is the 'statswin' class                              
#==============================================================================
package statswin;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'statswin' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_statswin_dismiss_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"statswin-$instance"}) {$instance++;}


    #
    # Construct a GtkWindow 'statswin'
    $widgets->{'statswin'} = new Gtk::Window;
    $widgets->{'statswin'}->set_title(_('Deck Statistics') );
    $widgets->{'statswin'}->set_position('none' );
    $widgets->{'statswin'}->set_policy(1, 1, 0 );
    $widgets->{'statswin'}->set_modal(0 );
    $widgets->{'statswin'}->set_default_size(400, 300 );
    $widgets->{'statswin'}->realize;
    $forms->{'statswin'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'statswin'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'statswin'}{'accelgroup'}->attach($widgets->{'statswin'} );
    $forms->{'statswin'}{'statswin'} = $widgets->{'statswin'};
	#
	# Construct a GtkVBox 'vbox9'
	$widgets->{'vbox9'} = new Gtk::VBox(0, 0 );
	$forms->{'statswin'}{'statswin'}->add($widgets->{'vbox9'} );
	$widgets->{'vbox9'}->show;
	$forms->{'statswin'}{'vbox9'} = $widgets->{'vbox9'};
	    #
	    # Construct a GtkFrame 'frame9'
	    $widgets->{'frame9'} = new Gtk::Frame(_('Mana Curve'));
	    $widgets->{'frame9'}->set_label_align(0, 0 );
	    $widgets->{'frame9'}->set_shadow_type('etched_in' );
	    $forms->{'statswin'}{'vbox9'}->add($widgets->{'frame9'} );
	    $widgets->{'frame9'}->show;
	    $forms->{'statswin'}{'frame9'} = $widgets->{'frame9'};
		#
		# Construct a GtkLabel 'mana_curve_label'
		$widgets->{'mana_curve_label'} = new Gtk::Label(_(''));
		$widgets->{'mana_curve_label'}->set_justify('left' );
		$widgets->{'mana_curve_label'}->set_line_wrap(0 );
		$forms->{'statswin'}{'frame9'}->add($widgets->{'mana_curve_label'} );
		$widgets->{'mana_curve_label'}->show;
		$forms->{'statswin'}{'mana_curve_label'} = $widgets->{'mana_curve_label'};
		$forms->{'statswin'}{'mana_curve_label'}->set_alignment(0.05, 0.5 );
	    $forms->{'statswin'}{'vbox9'}->set_child_packing($forms->{'statswin'}{'frame9'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHBox 'hbox16'
	    $widgets->{'hbox16'} = new Gtk::HBox(1, 0 );
	    $forms->{'statswin'}{'vbox9'}->add($widgets->{'hbox16'} );
	    $widgets->{'hbox16'}->show;
	    $forms->{'statswin'}{'hbox16'} = $widgets->{'hbox16'};
		#
		# Construct a GtkFrame 'frame5'
		$widgets->{'frame5'} = new Gtk::Frame(_('Mana Symbols of Each Color'));
		$widgets->{'frame5'}->set_label_align(0, 0 );
		$widgets->{'frame5'}->set_shadow_type('etched_in' );
		$forms->{'statswin'}{'hbox16'}->add($widgets->{'frame5'} );
		$widgets->{'frame5'}->show;
		$forms->{'statswin'}{'frame5'} = $widgets->{'frame5'};
		    #
		    # Construct a GtkLabel 'numcolors_label'
		    $widgets->{'numcolors_label'} = new Gtk::Label(_(''));
		    $widgets->{'numcolors_label'}->set_justify('left' );
		    $widgets->{'numcolors_label'}->set_line_wrap(1 );
		    $forms->{'statswin'}{'frame5'}->add($widgets->{'numcolors_label'} );
		    $widgets->{'numcolors_label'}->show;
		    $forms->{'statswin'}{'numcolors_label'} = $widgets->{'numcolors_label'};
		    $forms->{'statswin'}{'numcolors_label'}->set_alignment(0.05, 0.5 );
		$forms->{'statswin'}{'hbox16'}->set_child_packing($forms->{'statswin'}{'frame5'}, 0, 1, 0, 'start' );
		#
		# Construct a GtkFrame 'frame6'
		$widgets->{'frame6'} = new Gtk::Frame(_('Creature/Land Counts'));
		$widgets->{'frame6'}->set_label_align(0, 0 );
		$widgets->{'frame6'}->set_shadow_type('etched_in' );
		$forms->{'statswin'}{'hbox16'}->add($widgets->{'frame6'} );
		$widgets->{'frame6'}->show;
		$forms->{'statswin'}{'frame6'} = $widgets->{'frame6'};
		    #
		    # Construct a GtkLabel 'creatures_lands_label'
		    $widgets->{'creatures_lands_label'} = new Gtk::Label(_(''));
		    $widgets->{'creatures_lands_label'}->set_justify('left' );
		    $widgets->{'creatures_lands_label'}->set_line_wrap(1 );
		    $forms->{'statswin'}{'frame6'}->add($widgets->{'creatures_lands_label'} );
		    $widgets->{'creatures_lands_label'}->show;
		    $forms->{'statswin'}{'creatures_lands_label'} = $widgets->{'creatures_lands_label'};
		    $forms->{'statswin'}{'creatures_lands_label'}->set_alignment(0.05, 0.5 );
		$forms->{'statswin'}{'hbox16'}->set_child_packing($forms->{'statswin'}{'frame6'}, 0, 1, 0, 'start' );
	    $forms->{'statswin'}{'vbox9'}->set_child_packing($forms->{'statswin'}{'hbox16'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHButtonBox 'hbuttonbox11'
	    $widgets->{'hbuttonbox11'} = new Gtk::HButtonBox;
	    $forms->{'statswin'}{'vbox9'}->add($widgets->{'hbuttonbox11'} );
	    $widgets->{'hbuttonbox11'}->show;
	    $forms->{'statswin'}{'hbuttonbox11'} = $widgets->{'hbuttonbox11'};
	    $forms->{'statswin'}{'hbuttonbox11'}->set_layout('default_style' );
	    $forms->{'statswin'}{'hbuttonbox11'}->set_spacing(30 );
	    $forms->{'statswin'}{'hbuttonbox11'}->set_child_size(85, 27 );
	    $forms->{'statswin'}{'hbuttonbox11'}->set_child_ipadding(7, 0 );
		#
		# Construct a GtkButton 'statswin_dismiss'
		$widgets->{'statswin_dismiss'} = new Gtk::Button(_('Dismiss'));
		$forms->{'statswin'}{'hbuttonbox11'}->add($widgets->{'statswin_dismiss'} );
		$widgets->{'statswin_dismiss'}->show;
		$forms->{'statswin'}{'statswin_dismiss'} = $widgets->{'statswin_dismiss'};
		$forms->{'statswin'}{'statswin_dismiss'}->can_default(1 );
		$forms->{'statswin'}{'statswin_dismiss'}->can_focus(1 );
		$forms->{'statswin'}{'tooltips'}->set_tip($forms->{'statswin'}{'statswin_dismiss'}, _('Dismiss this dialog' ));
	    $forms->{'statswin'}{'vbox9'}->set_child_packing($forms->{'statswin'}{'hbuttonbox11'}, 0, 1, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'statswin'}{'statswin_dismiss'}->signal_connect('clicked', "$class\::on_statswin_dismiss_clicked", '', 'statswin_dismiss', "statswin-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'statswin'});
    $self->TOPLEVEL($self->FORM->{'statswin'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("statswin-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'viewwin' class                              
#==============================================================================
package viewwin;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'viewwin' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_view_dismiss_button_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"viewwin-$instance"}) {$instance++;}


    #
    # Construct a GtkDialog 'viewwin'
    $widgets->{'viewwin'} = new Gtk::Dialog;
    $widgets->{'viewwin'}->set_title(_('View Card') );
    $widgets->{'viewwin'}->set_position('none' );
    $widgets->{'viewwin'}->set_policy(0, 1, 0 );
    $widgets->{'viewwin'}->set_modal(0 );
    $widgets->{'viewwin'}->set_default_size(244, 170 );
    $widgets->{'viewwin'}->realize;
    $forms->{'viewwin'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'viewwin'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'viewwin'}{'accelgroup'}->attach($widgets->{'viewwin'} );
    $forms->{'viewwin'}{'viewwin'} = $widgets->{'viewwin'};
    $forms->{'viewwin'}{'viewwin'}->border_width(10 );
	#
	# Construct a GtkVBox 'dialog-vbox1'
	$widgets->{'dialog-vbox1'} = $forms->{'viewwin'}{'viewwin'}->vbox;
	$widgets->{'dialog-vbox1'}->show;
	$forms->{'viewwin'}{'dialog-vbox1'} = $widgets->{'dialog-vbox1'};
	    #
	    # Construct a GtkHBox 'dialog-action_area1'
	    $widgets->{'dialog-action_area1'} = $forms->{'viewwin'}{'viewwin'}->action_area;
	    $widgets->{'dialog-action_area1'}->show;
	    $forms->{'viewwin'}{'dialog-action_area1'} = $widgets->{'dialog-action_area1'};
	    $forms->{'viewwin'}{'dialog-action_area1'}->border_width(10 );
		#
		# Construct a GtkButton 'view_dismiss_button'
		$widgets->{'view_dismiss_button'} = new Gtk::Button(_('Dismiss'));
		$forms->{'viewwin'}{'dialog-action_area1'}->add($widgets->{'view_dismiss_button'} );
		$widgets->{'view_dismiss_button'}->show;
		$forms->{'viewwin'}{'view_dismiss_button'} = $widgets->{'view_dismiss_button'};
		$forms->{'viewwin'}{'view_dismiss_button'}->can_focus(1 );
		$forms->{'viewwin'}{'dialog-action_area1'}->set_child_packing($forms->{'viewwin'}{'view_dismiss_button'}, 0, 1, 0, 'start' );
	    $forms->{'viewwin'}{'dialog-vbox1'}->set_child_packing($forms->{'viewwin'}{'dialog-action_area1'}, 0, 1, 0, 'end' );
	    #
	    # Construct a GtkVBox 'vbox8'
	    $widgets->{'vbox8'} = new Gtk::VBox(0, 0 );
	    $forms->{'viewwin'}{'dialog-vbox1'}->add($widgets->{'vbox8'} );
	    $widgets->{'vbox8'}->show;
	    $forms->{'viewwin'}{'vbox8'} = $widgets->{'vbox8'};
		#
		# Construct a GtkHBox 'hbox14'
		$widgets->{'hbox14'} = new Gtk::HBox(1, 0 );
		$forms->{'viewwin'}{'vbox8'}->add($widgets->{'hbox14'} );
		$widgets->{'hbox14'}->show;
		$forms->{'viewwin'}{'hbox14'} = $widgets->{'hbox14'};
		    #
		    # Construct a GtkLabel 'name_label'
		    $widgets->{'name_label'} = new Gtk::Label(_('label59'));
		    $widgets->{'name_label'}->set_justify('left' );
		    $widgets->{'name_label'}->set_line_wrap(0 );
		    $forms->{'viewwin'}{'hbox14'}->add($widgets->{'name_label'} );
		    $widgets->{'name_label'}->show;
		    $forms->{'viewwin'}{'name_label'} = $widgets->{'name_label'};
		    $forms->{'viewwin'}{'name_label'}->set_alignment(0.05, 0.5 );
		    $forms->{'viewwin'}{'hbox14'}->set_child_packing($forms->{'viewwin'}{'name_label'}, 0, 1, 0, 'start' );
		    #
		    # Construct a GtkLabel 'cost_label'
		    $widgets->{'cost_label'} = new Gtk::Label(_('label60'));
		    $widgets->{'cost_label'}->set_justify('right' );
		    $widgets->{'cost_label'}->set_line_wrap(0 );
		    $forms->{'viewwin'}{'hbox14'}->add($widgets->{'cost_label'} );
		    $widgets->{'cost_label'}->show;
		    $forms->{'viewwin'}{'cost_label'} = $widgets->{'cost_label'};
		    $forms->{'viewwin'}{'cost_label'}->set_alignment(0.95, 0.5 );
		    $forms->{'viewwin'}{'hbox14'}->set_child_packing($forms->{'viewwin'}{'cost_label'}, 0, 1, 0, 'start' );
		$forms->{'viewwin'}{'vbox8'}->set_child_packing($forms->{'viewwin'}{'hbox14'}, 0, 1, 0, 'start' );
		#
		# Construct a GtkHBox 'hbox15'
		$widgets->{'hbox15'} = new Gtk::HBox(1, 0 );
		$forms->{'viewwin'}{'vbox8'}->add($widgets->{'hbox15'} );
		$widgets->{'hbox15'}->show;
		$forms->{'viewwin'}{'hbox15'} = $widgets->{'hbox15'};
		    #
		    # Construct a GtkLabel 'type_label'
		    $widgets->{'type_label'} = new Gtk::Label(_('label61'));
		    $widgets->{'type_label'}->set_justify('left' );
		    $widgets->{'type_label'}->set_line_wrap(0 );
		    $forms->{'viewwin'}{'hbox15'}->add($widgets->{'type_label'} );
		    $widgets->{'type_label'}->show;
		    $forms->{'viewwin'}{'type_label'} = $widgets->{'type_label'};
		    $forms->{'viewwin'}{'type_label'}->set_alignment(0.05, 0.5 );
		    $forms->{'viewwin'}{'hbox15'}->set_child_packing($forms->{'viewwin'}{'type_label'}, 0, 1, 0, 'start' );
		    #
		    # Construct a GtkLabel 'rarity_label'
		    $widgets->{'rarity_label'} = new Gtk::Label(_('label62'));
		    $widgets->{'rarity_label'}->set_justify('right' );
		    $widgets->{'rarity_label'}->set_line_wrap(0 );
		    $forms->{'viewwin'}{'hbox15'}->add($widgets->{'rarity_label'} );
		    $widgets->{'rarity_label'}->show;
		    $forms->{'viewwin'}{'rarity_label'} = $widgets->{'rarity_label'};
		    $forms->{'viewwin'}{'rarity_label'}->set_alignment(0.95, 0.5 );
		    $forms->{'viewwin'}{'hbox15'}->set_child_packing($forms->{'viewwin'}{'rarity_label'}, 0, 1, 0, 'start' );
		$forms->{'viewwin'}{'vbox8'}->set_child_packing($forms->{'viewwin'}{'hbox15'}, 0, 1, 0, 'start' );
		#
		# Construct a GtkFrame 'frame4'
		$widgets->{'frame4'} = new Gtk::Frame(_('Text'));
		$widgets->{'frame4'}->set_label_align(0, 0 );
		$widgets->{'frame4'}->set_shadow_type('etched_in' );
		$forms->{'viewwin'}{'vbox8'}->add($widgets->{'frame4'} );
		$widgets->{'frame4'}->show;
		$forms->{'viewwin'}{'frame4'} = $widgets->{'frame4'};
		    #
		    # Construct a GtkLabel 'text_label'
		    $widgets->{'text_label'} = new Gtk::Label(_(''));
		    $widgets->{'text_label'}->set_justify('left' );
		    $widgets->{'text_label'}->set_line_wrap(1 );
		    $forms->{'viewwin'}{'frame4'}->add($widgets->{'text_label'} );
		    $widgets->{'text_label'}->show;
		    $forms->{'viewwin'}{'text_label'} = $widgets->{'text_label'};
		    $forms->{'viewwin'}{'text_label'}->set_alignment(0.5, 0.5 );
		$forms->{'viewwin'}{'vbox8'}->set_child_packing($forms->{'viewwin'}{'frame4'}, 0, 1, 0, 'start' );
		#
		# Construct a GtkFrame 'frame3'
		$widgets->{'frame3'} = new Gtk::Frame(_('Flavor Text'));
		$widgets->{'frame3'}->set_label_align(0, 0 );
		$widgets->{'frame3'}->set_shadow_type('etched_in' );
		$forms->{'viewwin'}{'vbox8'}->add($widgets->{'frame3'} );
		$widgets->{'frame3'}->show;
		$forms->{'viewwin'}{'frame3'} = $widgets->{'frame3'};
		    #
		    # Construct a GtkLabel 'flavor_label'
		    $widgets->{'flavor_label'} = new Gtk::Label(_(''));
		    $widgets->{'flavor_label'}->set_justify('left' );
		    $widgets->{'flavor_label'}->set_line_wrap(1 );
		    $forms->{'viewwin'}{'frame3'}->add($widgets->{'flavor_label'} );
		    $widgets->{'flavor_label'}->show;
		    $forms->{'viewwin'}{'flavor_label'} = $widgets->{'flavor_label'};
		    $forms->{'viewwin'}{'flavor_label'}->set_alignment(0.5, 0.5 );
		$forms->{'viewwin'}{'vbox8'}->set_child_packing($forms->{'viewwin'}{'frame3'}, 0, 1, 0, 'start' );
		#
		# Construct a GtkLabel 'pt_label'
		$widgets->{'pt_label'} = new Gtk::Label(_(''));
		$widgets->{'pt_label'}->set_justify('center' );
		$widgets->{'pt_label'}->set_line_wrap(0 );
		$forms->{'viewwin'}{'vbox8'}->add($widgets->{'pt_label'} );
		$widgets->{'pt_label'}->show;
		$forms->{'viewwin'}{'pt_label'} = $widgets->{'pt_label'};
		$forms->{'viewwin'}{'pt_label'}->set_alignment(0.95, 0.5 );
		$forms->{'viewwin'}{'vbox8'}->set_child_packing($forms->{'viewwin'}{'pt_label'}, 0, 1, 0, 'start' );
	    $forms->{'viewwin'}{'dialog-vbox1'}->set_child_packing($forms->{'viewwin'}{'vbox8'}, 1, 1, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'viewwin'}{'view_dismiss_button'}->signal_connect('clicked', "$class\::on_view_dismiss_button_clicked", '', 'view_dismiss_button', "viewwin-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'viewwin'});
    $self->TOPLEVEL($self->FORM->{'viewwin'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("viewwin-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'deckgenwin' class                              
#==============================================================================
package deckgenwin;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'deckgenwin' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_add_booster_clicked' => undef,
    'on_add_starter_clicked' => undef,
    'on_deckgen_cancel_clicked' => undef,
    'on_deckgen_generate_clicked' => undef,
    'on_remove_booster_clicked' => undef,
    'on_remove_starter_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"deckgenwin-$instance"}) {$instance++;}


    #
    # Construct a GtkWindow 'deckgenwin'
    $widgets->{'deckgenwin'} = new Gtk::Window;
    $widgets->{'deckgenwin'}->set_title(_('Deck Generator') );
    $widgets->{'deckgenwin'}->set_position('none' );
    $widgets->{'deckgenwin'}->set_policy(0, 1, 0 );
    $widgets->{'deckgenwin'}->set_modal(1 );
    $widgets->{'deckgenwin'}->realize;
    $forms->{'deckgenwin'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'deckgenwin'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'deckgenwin'}{'accelgroup'}->attach($widgets->{'deckgenwin'} );
    $forms->{'deckgenwin'}{'deckgenwin'} = $widgets->{'deckgenwin'};
	#
	# Construct a GtkVBox 'vbox7'
	$widgets->{'vbox7'} = new Gtk::VBox(0, 0 );
	$forms->{'deckgenwin'}{'deckgenwin'}->add($widgets->{'vbox7'} );
	$widgets->{'vbox7'}->show;
	$forms->{'deckgenwin'}{'vbox7'} = $widgets->{'vbox7'};
	    #
	    # Construct a GtkHBox 'hbox10'
	    $widgets->{'hbox10'} = new Gtk::HBox(0, 0 );
	    $forms->{'deckgenwin'}{'vbox7'}->add($widgets->{'hbox10'} );
	    $widgets->{'hbox10'}->show;
	    $forms->{'deckgenwin'}{'hbox10'} = $widgets->{'hbox10'};
		#
		# Construct a GtkFrame 'frame7'
		$widgets->{'frame7'} = new Gtk::Frame(_('Starter Decks/Tourney Packs'));
		$widgets->{'frame7'}->set_label_align(0, 0 );
		$widgets->{'frame7'}->set_shadow_type('etched_in' );
		$forms->{'deckgenwin'}{'hbox10'}->add($widgets->{'frame7'} );
		$widgets->{'frame7'}->show;
		$forms->{'deckgenwin'}{'frame7'} = $widgets->{'frame7'};
		    #
		    # Construct a GtkCombo 'starter_combo'
		    $widgets->{'starter_combo'} = new Gtk::Combo;
		    $widgets->{'starter_combo'}->set_case_sensitive(0 );
		    $widgets->{'starter_combo'}->set_use_arrows(1 );
		    $widgets->{'starter_combo'}->set_use_arrows_always(1 );
		    $widgets->{'starter_combo'}->set_popdown_strings( '' );
		    $forms->{'deckgenwin'}{'frame7'}->add($widgets->{'starter_combo'} );
		    $widgets->{'starter_combo'}->show;
		    $forms->{'deckgenwin'}{'starter_combo'} = $widgets->{'starter_combo'};
			#
			# Construct a GtkEntry 'combo-entry3'
			$widgets->{'combo-entry3'} = $forms->{'deckgenwin'}{'starter_combo'}->entry;
			$widgets->{'combo-entry3'}->show;
			$forms->{'deckgenwin'}{'combo-entry3'} = $widgets->{'combo-entry3'};
			$forms->{'deckgenwin'}{'combo-entry3'}->can_focus(1 );
			$forms->{'deckgenwin'}{'combo-entry3'}->set_text(_('') );
			$forms->{'deckgenwin'}{'combo-entry3'}->set_max_length(0 );
			$forms->{'deckgenwin'}{'combo-entry3'}->set_visibility(1 );
			$forms->{'deckgenwin'}{'combo-entry3'}->set_editable(0 );
		$forms->{'deckgenwin'}{'hbox10'}->set_child_packing($forms->{'deckgenwin'}{'frame7'}, 1, 1, 0, 'start' );
		#
		# Construct a GtkVButtonBox 'vbuttonbox3'
		$widgets->{'vbuttonbox3'} = new Gtk::VButtonBox;
		$forms->{'deckgenwin'}{'hbox10'}->add($widgets->{'vbuttonbox3'} );
		$widgets->{'vbuttonbox3'}->show;
		$forms->{'deckgenwin'}{'vbuttonbox3'} = $widgets->{'vbuttonbox3'};
		$forms->{'deckgenwin'}{'vbuttonbox3'}->set_layout('spread' );
		$forms->{'deckgenwin'}{'vbuttonbox3'}->set_spacing(10 );
		$forms->{'deckgenwin'}{'vbuttonbox3'}->set_child_size(85, 27 );
		$forms->{'deckgenwin'}{'vbuttonbox3'}->set_child_ipadding(7, 0 );
		    #
		    # Construct a GtkButton 'add_starter'
		    $widgets->{'add_starter'} = new Gtk::Button(_('-->'));
		    $forms->{'deckgenwin'}{'vbuttonbox3'}->add($widgets->{'add_starter'} );
		    $widgets->{'add_starter'}->show;
		    $forms->{'deckgenwin'}{'add_starter'} = $widgets->{'add_starter'};
		    $forms->{'deckgenwin'}{'add_starter'}->can_default(1 );
		    $forms->{'deckgenwin'}{'add_starter'}->can_focus(1 );
		    #
		    # Construct a GtkButton 'remove_starter'
		    $widgets->{'remove_starter'} = new Gtk::Button(_('<--'));
		    $forms->{'deckgenwin'}{'vbuttonbox3'}->add($widgets->{'remove_starter'} );
		    $widgets->{'remove_starter'}->show;
		    $forms->{'deckgenwin'}{'remove_starter'} = $widgets->{'remove_starter'};
		    $forms->{'deckgenwin'}{'remove_starter'}->can_default(1 );
		    $forms->{'deckgenwin'}{'remove_starter'}->can_focus(1 );
		$forms->{'deckgenwin'}{'hbox10'}->set_child_packing($forms->{'deckgenwin'}{'vbuttonbox3'}, 1, 1, 0, 'start' );
		#
		# Construct a GtkScrolledWindow 'scrolledwindow7'
		$widgets->{'scrolledwindow7'} = new Gtk::ScrolledWindow( undef, undef);
		$widgets->{'scrolledwindow7'}->set_policy('never', 'always' );
		$widgets->{'scrolledwindow7'}->border_width(0 );
		$widgets->{'scrolledwindow7'}->hscrollbar->set_update_policy('continuous' );
		$widgets->{'scrolledwindow7'}->vscrollbar->set_update_policy('continuous' );
		$forms->{'deckgenwin'}{'hbox10'}->add($widgets->{'scrolledwindow7'} );
		$widgets->{'scrolledwindow7'}->show;
		$forms->{'deckgenwin'}{'scrolledwindow7'} = $widgets->{'scrolledwindow7'};
		    #
		    # Construct a GtkCList 'starter_list'
		    $widgets->{'starter_list'} = new Gtk::CList(2 );
		    $widgets->{'starter_list'}->set_selection_mode('extended' );
		    $widgets->{'starter_list'}->set_border('in' );
		    $widgets->{'starter_list'}->set_column_width(0, 80 );
		    $widgets->{'starter_list'}->set_column_width(1, 80 );
		    $forms->{'deckgenwin'}{'scrolledwindow7'}->add($widgets->{'starter_list'} );
		    $widgets->{'starter_list'}->show;
		    $forms->{'deckgenwin'}{'starter_list'} = $widgets->{'starter_list'};
		    $forms->{'deckgenwin'}{'starter_list'}->can_focus(1 );
			#
			# Construct a GtkLabel 'label55'
			$widgets->{'label55'} = new Gtk::Label(_('label55'));
			$widgets->{'label55'}->set_justify('center' );
			$widgets->{'label55'}->set_line_wrap(0 );
			$forms->{'deckgenwin'}{'starter_list'}->set_column_widget(0, $widgets->{'label55'} );
			$widgets->{'label55'}->show;
			$forms->{'deckgenwin'}{'label55'} = $widgets->{'label55'};
			$forms->{'deckgenwin'}{'label55'}->set_alignment(0.5, 0.5 );
			#
			# Construct a GtkLabel 'label56'
			$widgets->{'label56'} = new Gtk::Label(_('label56'));
			$widgets->{'label56'}->set_justify('center' );
			$widgets->{'label56'}->set_line_wrap(0 );
			$forms->{'deckgenwin'}{'starter_list'}->set_column_widget(1, $widgets->{'label56'} );
			$widgets->{'label56'}->show;
			$forms->{'deckgenwin'}{'label56'} = $widgets->{'label56'};
			$forms->{'deckgenwin'}{'label56'}->set_alignment(0.5, 0.5 );
		$forms->{'deckgenwin'}{'hbox10'}->set_child_packing($forms->{'deckgenwin'}{'scrolledwindow7'}, 1, 1, 0, 'start' );
	    $forms->{'deckgenwin'}{'vbox7'}->set_child_packing($forms->{'deckgenwin'}{'hbox10'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHBox 'hbox9'
	    $widgets->{'hbox9'} = new Gtk::HBox(0, 0 );
	    $forms->{'deckgenwin'}{'vbox7'}->add($widgets->{'hbox9'} );
	    $widgets->{'hbox9'}->show;
	    $forms->{'deckgenwin'}{'hbox9'} = $widgets->{'hbox9'};
		#
		# Construct a GtkFrame 'frame8'
		$widgets->{'frame8'} = new Gtk::Frame(_('Booster Packs'));
		$widgets->{'frame8'}->set_label_align(0, 0 );
		$widgets->{'frame8'}->set_shadow_type('etched_in' );
		$forms->{'deckgenwin'}{'hbox9'}->add($widgets->{'frame8'} );
		$widgets->{'frame8'}->show;
		$forms->{'deckgenwin'}{'frame8'} = $widgets->{'frame8'};
		    #
		    # Construct a GtkCombo 'booster_combo'
		    $widgets->{'booster_combo'} = new Gtk::Combo;
		    $widgets->{'booster_combo'}->set_case_sensitive(0 );
		    $widgets->{'booster_combo'}->set_use_arrows(1 );
		    $widgets->{'booster_combo'}->set_use_arrows_always(1 );
		    $widgets->{'booster_combo'}->set_popdown_strings( '' );
		    $forms->{'deckgenwin'}{'frame8'}->add($widgets->{'booster_combo'} );
		    $widgets->{'booster_combo'}->show;
		    $forms->{'deckgenwin'}{'booster_combo'} = $widgets->{'booster_combo'};
			#
			# Construct a GtkEntry 'combo-entry4'
			$widgets->{'combo-entry4'} = $forms->{'deckgenwin'}{'booster_combo'}->entry;
			$widgets->{'combo-entry4'}->show;
			$forms->{'deckgenwin'}{'combo-entry4'} = $widgets->{'combo-entry4'};
			$forms->{'deckgenwin'}{'combo-entry4'}->can_focus(1 );
			$forms->{'deckgenwin'}{'combo-entry4'}->set_text(_('') );
			$forms->{'deckgenwin'}{'combo-entry4'}->set_max_length(0 );
			$forms->{'deckgenwin'}{'combo-entry4'}->set_visibility(1 );
			$forms->{'deckgenwin'}{'combo-entry4'}->set_editable(0 );
		$forms->{'deckgenwin'}{'hbox9'}->set_child_packing($forms->{'deckgenwin'}{'frame8'}, 1, 1, 0, 'start' );
		#
		# Construct a GtkVButtonBox 'vbuttonbox2'
		$widgets->{'vbuttonbox2'} = new Gtk::VButtonBox;
		$forms->{'deckgenwin'}{'hbox9'}->add($widgets->{'vbuttonbox2'} );
		$widgets->{'vbuttonbox2'}->show;
		$forms->{'deckgenwin'}{'vbuttonbox2'} = $widgets->{'vbuttonbox2'};
		$forms->{'deckgenwin'}{'vbuttonbox2'}->set_layout('spread' );
		$forms->{'deckgenwin'}{'vbuttonbox2'}->set_spacing(10 );
		$forms->{'deckgenwin'}{'vbuttonbox2'}->set_child_size(85, 27 );
		$forms->{'deckgenwin'}{'vbuttonbox2'}->set_child_ipadding(7, 0 );
		    #
		    # Construct a GtkButton 'add_booster'
		    $widgets->{'add_booster'} = new Gtk::Button(_('-->'));
		    $forms->{'deckgenwin'}{'vbuttonbox2'}->add($widgets->{'add_booster'} );
		    $widgets->{'add_booster'}->show;
		    $forms->{'deckgenwin'}{'add_booster'} = $widgets->{'add_booster'};
		    $forms->{'deckgenwin'}{'add_booster'}->can_default(1 );
		    $forms->{'deckgenwin'}{'add_booster'}->can_focus(1 );
		    #
		    # Construct a GtkButton 'remove_booster'
		    $widgets->{'remove_booster'} = new Gtk::Button(_('<--'));
		    $forms->{'deckgenwin'}{'vbuttonbox2'}->add($widgets->{'remove_booster'} );
		    $widgets->{'remove_booster'}->show;
		    $forms->{'deckgenwin'}{'remove_booster'} = $widgets->{'remove_booster'};
		    $forms->{'deckgenwin'}{'remove_booster'}->can_default(1 );
		    $forms->{'deckgenwin'}{'remove_booster'}->can_focus(1 );
		$forms->{'deckgenwin'}{'hbox9'}->set_child_packing($forms->{'deckgenwin'}{'vbuttonbox2'}, 1, 1, 0, 'start' );
		#
		# Construct a GtkScrolledWindow 'scrolledwindow8'
		$widgets->{'scrolledwindow8'} = new Gtk::ScrolledWindow( undef, undef);
		$widgets->{'scrolledwindow8'}->set_policy('never', 'always' );
		$widgets->{'scrolledwindow8'}->border_width(0 );
		$widgets->{'scrolledwindow8'}->hscrollbar->set_update_policy('continuous' );
		$widgets->{'scrolledwindow8'}->vscrollbar->set_update_policy('continuous' );
		$forms->{'deckgenwin'}{'hbox9'}->add($widgets->{'scrolledwindow8'} );
		$widgets->{'scrolledwindow8'}->show;
		$forms->{'deckgenwin'}{'scrolledwindow8'} = $widgets->{'scrolledwindow8'};
		    #
		    # Construct a GtkCList 'booster_list'
		    $widgets->{'booster_list'} = new Gtk::CList(2 );
		    $widgets->{'booster_list'}->set_selection_mode('extended' );
		    $widgets->{'booster_list'}->set_border('in' );
		    $widgets->{'booster_list'}->set_column_width(0, 80 );
		    $widgets->{'booster_list'}->set_column_width(1, 80 );
		    $forms->{'deckgenwin'}{'scrolledwindow8'}->add($widgets->{'booster_list'} );
		    $widgets->{'booster_list'}->show;
		    $forms->{'deckgenwin'}{'booster_list'} = $widgets->{'booster_list'};
		    $forms->{'deckgenwin'}{'booster_list'}->can_focus(1 );
			#
			# Construct a GtkLabel 'label57'
			$widgets->{'label57'} = new Gtk::Label(_('label57'));
			$widgets->{'label57'}->set_justify('center' );
			$widgets->{'label57'}->set_line_wrap(0 );
			$forms->{'deckgenwin'}{'booster_list'}->set_column_widget(0, $widgets->{'label57'} );
			$widgets->{'label57'}->show;
			$forms->{'deckgenwin'}{'label57'} = $widgets->{'label57'};
			$forms->{'deckgenwin'}{'label57'}->set_alignment(0.5, 0.5 );
			#
			# Construct a GtkLabel 'label58'
			$widgets->{'label58'} = new Gtk::Label(_('label58'));
			$widgets->{'label58'}->set_justify('center' );
			$widgets->{'label58'}->set_line_wrap(0 );
			$forms->{'deckgenwin'}{'booster_list'}->set_column_widget(1, $widgets->{'label58'} );
			$widgets->{'label58'}->show;
			$forms->{'deckgenwin'}{'label58'} = $widgets->{'label58'};
			$forms->{'deckgenwin'}{'label58'}->set_alignment(0.5, 0.5 );
		$forms->{'deckgenwin'}{'hbox9'}->set_child_packing($forms->{'deckgenwin'}{'scrolledwindow8'}, 1, 1, 0, 'start' );
	    $forms->{'deckgenwin'}{'vbox7'}->set_child_packing($forms->{'deckgenwin'}{'hbox9'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHButtonBox 'hbuttonbox9'
	    $widgets->{'hbuttonbox9'} = new Gtk::HButtonBox;
	    $forms->{'deckgenwin'}{'vbox7'}->add($widgets->{'hbuttonbox9'} );
	    $widgets->{'hbuttonbox9'}->show;
	    $forms->{'deckgenwin'}{'hbuttonbox9'} = $widgets->{'hbuttonbox9'};
	    $forms->{'deckgenwin'}{'hbuttonbox9'}->set_layout('end' );
	    $forms->{'deckgenwin'}{'hbuttonbox9'}->set_spacing(30 );
	    $forms->{'deckgenwin'}{'hbuttonbox9'}->set_child_size(85, 27 );
	    $forms->{'deckgenwin'}{'hbuttonbox9'}->set_child_ipadding(7, 0 );
		#
		# Construct a GtkButton 'deckgen_cancel'
		$widgets->{'deckgen_cancel'} = new Gtk::Button(_('Cancel'));
		$forms->{'deckgenwin'}{'hbuttonbox9'}->add($widgets->{'deckgen_cancel'} );
		$widgets->{'deckgen_cancel'}->show;
		$forms->{'deckgenwin'}{'deckgen_cancel'} = $widgets->{'deckgen_cancel'};
		$forms->{'deckgenwin'}{'deckgen_cancel'}->can_default(1 );
		$forms->{'deckgenwin'}{'deckgen_cancel'}->can_focus(1 );
		#
		# Construct a GtkButton 'deckgen_generate'
		$widgets->{'deckgen_generate'} = new Gtk::Button(_('Generate'));
		$forms->{'deckgenwin'}{'hbuttonbox9'}->add($widgets->{'deckgen_generate'} );
		$widgets->{'deckgen_generate'}->show;
		$forms->{'deckgenwin'}{'deckgen_generate'} = $widgets->{'deckgen_generate'};
		$forms->{'deckgenwin'}{'deckgen_generate'}->can_default(1 );
		$forms->{'deckgenwin'}{'deckgen_generate'}->can_focus(1 );
	    $forms->{'deckgenwin'}{'vbox7'}->set_child_packing($forms->{'deckgenwin'}{'hbuttonbox9'}, 0, 0, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'deckgenwin'}{'add_starter'}->signal_connect('clicked', "$class\::on_add_starter_clicked", '', 'add_starter', "deckgenwin-$instance" );
    $forms->{'deckgenwin'}{'remove_starter'}->signal_connect('clicked', "$class\::on_remove_starter_clicked", '', 'remove_starter', "deckgenwin-$instance" );
    $forms->{'deckgenwin'}{'add_booster'}->signal_connect('clicked', "$class\::on_add_booster_clicked", '', 'add_booster', "deckgenwin-$instance" );
    $forms->{'deckgenwin'}{'remove_booster'}->signal_connect('clicked', "$class\::on_remove_booster_clicked", '', 'remove_booster', "deckgenwin-$instance" );
    $forms->{'deckgenwin'}{'deckgen_cancel'}->signal_connect('clicked', "$class\::on_deckgen_cancel_clicked", '', 'deckgen_cancel', "deckgenwin-$instance" );
    $forms->{'deckgenwin'}{'deckgen_generate'}->signal_connect('clicked', "$class\::on_deckgen_generate_clicked", '', 'deckgen_generate', "deckgenwin-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'deckgenwin'});
    $self->TOPLEVEL($self->FORM->{'deckgenwin'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("deckgenwin-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'pool_selection' class                              
#==============================================================================
package pool_selection;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'pool_selection' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_pool_cancel_clicked' => undef,
    'on_pool_ok_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"pool_selection-$instance"}) {$instance++;}


    #
    # Construct a GtkFileSelection 'pool_selection'
    $widgets->{'pool_selection'} = new Gtk::FileSelection(_('Select Card Pool') );
    $widgets->{'pool_selection'}->show_fileop_buttons;
    $widgets->{'pool_selection'}->set_position('none' );
    $widgets->{'pool_selection'}->set_policy(0, 1, 0 );
    $widgets->{'pool_selection'}->set_modal(1 );
    $widgets->{'pool_selection'}->realize;
    $forms->{'pool_selection'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'pool_selection'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'pool_selection'}{'accelgroup'}->attach($widgets->{'pool_selection'} );
    $forms->{'pool_selection'}{'pool_selection'} = $widgets->{'pool_selection'};
    $forms->{'pool_selection'}{'pool_selection'}->border_width(10 );
	#
	# Construct a GtkButton 'pool_ok'
	$widgets->{'pool_ok'} = $forms->{'pool_selection'}{'pool_selection'}->ok_button;
	$widgets->{'pool_ok'}->child->set_text(_('OK'));
	$widgets->{'pool_ok'}->show;
	$forms->{'pool_selection'}{'pool_ok'} = $widgets->{'pool_ok'};
	$forms->{'pool_selection'}{'pool_ok'}->can_default(1 );
	$forms->{'pool_selection'}{'pool_ok'}->can_focus(1 );
	#
	# Construct a GtkButton 'pool_cancel'
	$widgets->{'pool_cancel'} = $forms->{'pool_selection'}{'pool_selection'}->cancel_button;
	$widgets->{'pool_cancel'}->child->set_text(_('Cancel'));
	$widgets->{'pool_cancel'}->show;
	$forms->{'pool_selection'}{'pool_cancel'} = $widgets->{'pool_cancel'};
	$forms->{'pool_selection'}{'pool_cancel'}->can_default(1 );
	$forms->{'pool_selection'}{'pool_cancel'}->can_focus(1 );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'pool_selection'}{'pool_ok'}->signal_connect('clicked', "$class\::on_pool_ok_clicked", '', 'pool_ok', "pool_selection-$instance" );
    $forms->{'pool_selection'}{'pool_cancel'}->signal_connect('clicked', "$class\::on_pool_cancel_clicked", '', 'pool_cancel', "pool_selection-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'pool_selection'});
    $self->TOPLEVEL($self->FORM->{'pool_selection'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("pool_selection-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'mainwin' class                              
#==============================================================================
package mainwin;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'mainwin' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'd2sb_clicked' => undef,
    'filter_clicked' => undef,
    'in_deck_clicked' => undef,
    'in_sb_clicked' => undef,
    'on_add_lands_button_clicked' => undef,
    'on_deck_with_this_cardpool1_activate' => undef,
    'on_deck_with_unlimited_cardpool1_activate' => undef,
    'on_export_card_pool_activate' => undef,
    'on_export_deck_activate' => undef,
    'on_generate_sealed_deck1_activate' => undef,
    'on_import_card_pool_activate' => undef,
    'on_import_deck_activate' => undef,
    'on_mainwin_delete' => undef,
    'on_pool_list_button_press_event' => undef,
    'on_pool_list_click_column' => undef,
    'on_quit1_activate' => undef,
    'on_stats_button_clicked' => undef,
    'out_deck_clicked' => undef,
    'out_sb_clicked' => undef,
    'reset_clicked' => undef,
    'sb2d_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"mainwin-$instance"}) {$instance++;}


    #
    # Construct a GtkWindow 'mainwin'
    $widgets->{'mainwin'} = new Gtk::Window;
    $widgets->{'mainwin'}->set_title(_('Decked') );
    $widgets->{'mainwin'}->set_position('none' );
    $widgets->{'mainwin'}->set_policy(1, 1, 0 );
    $widgets->{'mainwin'}->set_modal(0 );
    $widgets->{'mainwin'}->set_default_size(950, 700 );
    $widgets->{'mainwin'}->realize;
    $forms->{'mainwin'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'mainwin'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'mainwin'}{'accelgroup'}->attach($widgets->{'mainwin'} );
    $forms->{'mainwin'}{'mainwin'} = $widgets->{'mainwin'};
	#
	# Construct a GtkVBox 'vbox1'
	$widgets->{'vbox1'} = new Gtk::VBox(0, 0 );
	$forms->{'mainwin'}{'mainwin'}->add($widgets->{'vbox1'} );
	$widgets->{'vbox1'}->show;
	$forms->{'mainwin'}{'vbox1'} = $widgets->{'vbox1'};
	    #
	    # Construct a GtkMenuBar 'menubar1'
	    $widgets->{'menubar1'} = new Gtk::MenuBar;
	    $widgets->{'menubar1'}->set_shadow_type('out' );
	    $forms->{'mainwin'}{'vbox1'}->add($widgets->{'menubar1'} );
	    $widgets->{'menubar1'}->show;
	    $forms->{'mainwin'}{'menubar1'} = $widgets->{'menubar1'};
		#
		# Construct a GtkMenuItem 'file1'
		$widgets->{'file1'} = new Gtk::MenuItem(_('File'));
		$forms->{'mainwin'}{'menubar1'}->append($widgets->{'file1'} );
		$widgets->{'file1'}->show;
		$forms->{'mainwin'}{'file1'} = $widgets->{'file1'};
		    #
		    # Construct a GtkMenu 'file1_menu'
		    $widgets->{'file1_menu'} = new Gtk::Menu;
		    $forms->{'mainwin'}{'file1'}->set_submenu($widgets->{'file1_menu'} );
		    $forms->{'mainwin'}{'file1_menu'} = $widgets->{'file1_menu'};
			#
			# Construct a GtkMenuItem 'new1'
			$widgets->{'new1'} = new Gtk::MenuItem(_('New'));
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'new1'} );
			$widgets->{'new1'}->show;
			$forms->{'mainwin'}{'new1'} = $widgets->{'new1'};
			    #
			    # Construct a GtkMenu 'new1_menu'
			    $widgets->{'new1_menu'} = new Gtk::Menu;
			    $forms->{'mainwin'}{'new1'}->set_submenu($widgets->{'new1_menu'} );
			    $forms->{'mainwin'}{'new1_menu'} = $widgets->{'new1_menu'};
				#
				# Construct a GtkMenuItem 'deck_with_unlimited_cardpool1'
				$widgets->{'deck_with_unlimited_cardpool1'} = new Gtk::MenuItem(_('Deck with Unlimited Cardpool'));
				$forms->{'mainwin'}{'new1_menu'}->append($widgets->{'deck_with_unlimited_cardpool1'} );
				$widgets->{'deck_with_unlimited_cardpool1'}->show;
				$forms->{'mainwin'}{'deck_with_unlimited_cardpool1'} = $widgets->{'deck_with_unlimited_cardpool1'};
				#
				# Construct a GtkMenuItem 'deck_with_this_cardpool1'
				$widgets->{'deck_with_this_cardpool1'} = new Gtk::MenuItem(_('Deck with this Cardpool'));
				$forms->{'mainwin'}{'new1_menu'}->append($widgets->{'deck_with_this_cardpool1'} );
				$widgets->{'deck_with_this_cardpool1'}->show;
				$forms->{'mainwin'}{'deck_with_this_cardpool1'} = $widgets->{'deck_with_this_cardpool1'};
			#
			# Construct a GtkMenuItem 'separator1'
			$widgets->{'separator1'} = new Gtk::MenuItem;
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'separator1'} );
			$widgets->{'separator1'}->show;
			$forms->{'mainwin'}{'separator1'} = $widgets->{'separator1'};
			#
			# Construct a GtkMenuItem 'import1'
			$widgets->{'import1'} = new Gtk::MenuItem(_('Import'));
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'import1'} );
			$widgets->{'import1'}->show;
			$forms->{'mainwin'}{'import1'} = $widgets->{'import1'};
			    #
			    # Construct a GtkMenu 'import1_menu'
			    $widgets->{'import1_menu'} = new Gtk::Menu;
			    $forms->{'mainwin'}{'import1'}->set_submenu($widgets->{'import1_menu'} );
			    $forms->{'mainwin'}{'import1_menu'} = $widgets->{'import1_menu'};
				#
				# Construct a GtkMenuItem 'deck1'
				$widgets->{'deck1'} = new Gtk::MenuItem(_('Deck'));
				$forms->{'mainwin'}{'import1_menu'}->append($widgets->{'deck1'} );
				$widgets->{'deck1'}->show;
				$forms->{'mainwin'}{'deck1'} = $widgets->{'deck1'};
				#
				# Construct a GtkMenuItem 'card_pool1'
				$widgets->{'card_pool1'} = new Gtk::MenuItem(_('Card Pool'));
				$forms->{'mainwin'}{'import1_menu'}->append($widgets->{'card_pool1'} );
				$widgets->{'card_pool1'}->show;
				$forms->{'mainwin'}{'card_pool1'} = $widgets->{'card_pool1'};
			#
			# Construct a GtkMenuItem 'export1'
			$widgets->{'export1'} = new Gtk::MenuItem(_('Export (Save)'));
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'export1'} );
			$widgets->{'export1'}->show;
			$forms->{'mainwin'}{'export1'} = $widgets->{'export1'};
			    #
			    # Construct a GtkMenu 'export1_menu'
			    $widgets->{'export1_menu'} = new Gtk::Menu;
			    $forms->{'mainwin'}{'export1'}->set_submenu($widgets->{'export1_menu'} );
			    $forms->{'mainwin'}{'export1_menu'} = $widgets->{'export1_menu'};
				#
				# Construct a GtkMenuItem 'deck2'
				$widgets->{'deck2'} = new Gtk::MenuItem(_('Deck'));
				$forms->{'mainwin'}{'export1_menu'}->append($widgets->{'deck2'} );
				$widgets->{'deck2'}->show;
				$forms->{'mainwin'}{'deck2'} = $widgets->{'deck2'};
				#
				# Construct a GtkMenuItem 'card_pool2'
				$widgets->{'card_pool2'} = new Gtk::MenuItem(_('Card Pool'));
				$forms->{'mainwin'}{'export1_menu'}->append($widgets->{'card_pool2'} );
				$widgets->{'card_pool2'}->show;
				$forms->{'mainwin'}{'card_pool2'} = $widgets->{'card_pool2'};
			#
			# Construct a GtkMenuItem 'separator2'
			$widgets->{'separator2'} = new Gtk::MenuItem;
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'separator2'} );
			$widgets->{'separator2'}->show;
			$forms->{'mainwin'}{'separator2'} = $widgets->{'separator2'};
			#
			# Construct a GtkMenuItem 'generate_sealed_deck1'
			$widgets->{'generate_sealed_deck1'} = new Gtk::MenuItem(_('Generate Sealed Deck'));
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'generate_sealed_deck1'} );
			$widgets->{'generate_sealed_deck1'}->show;
			$forms->{'mainwin'}{'generate_sealed_deck1'} = $widgets->{'generate_sealed_deck1'};
			#
			# Construct a GtkMenuItem 'separator3'
			$widgets->{'separator3'} = new Gtk::MenuItem;
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'separator3'} );
			$widgets->{'separator3'}->show;
			$forms->{'mainwin'}{'separator3'} = $widgets->{'separator3'};
			#
			# Construct a GtkMenuItem 'quit1'
			$widgets->{'quit1'} = new Gtk::MenuItem(_('Quit'));
			$forms->{'mainwin'}{'file1_menu'}->append($widgets->{'quit1'} );
			$widgets->{'quit1'}->show;
			$forms->{'mainwin'}{'quit1'} = $widgets->{'quit1'};
	    $forms->{'mainwin'}{'vbox1'}->set_child_packing($forms->{'mainwin'}{'menubar1'}, 0, 0, 0, 'start' );
	    #
	    # Construct a GtkHBox 'hbox1'
	    $widgets->{'hbox1'} = new Gtk::HBox(0, 0 );
	    $forms->{'mainwin'}{'vbox1'}->add($widgets->{'hbox1'} );
	    $widgets->{'hbox1'}->show;
	    $forms->{'mainwin'}{'hbox1'} = $widgets->{'hbox1'};
		#
		# Construct a GtkVBox 'vbox2'
		$widgets->{'vbox2'} = new Gtk::VBox(0, 0 );
		$forms->{'mainwin'}{'hbox1'}->add($widgets->{'vbox2'} );
		$widgets->{'vbox2'}->show;
		$forms->{'mainwin'}{'vbox2'} = $widgets->{'vbox2'};
		    #
		    # Construct a GtkFrame 'filter_frame'
		    $widgets->{'filter_frame'} = new Gtk::Frame(_('Filters'));
		    $widgets->{'filter_frame'}->set_label_align(0, 0 );
		    $widgets->{'filter_frame'}->set_shadow_type('etched_in' );
		    $forms->{'mainwin'}{'vbox2'}->add($widgets->{'filter_frame'} );
		    $widgets->{'filter_frame'}->show;
		    $forms->{'mainwin'}{'filter_frame'} = $widgets->{'filter_frame'};
			#
			# Construct a GtkTree 'filter_tree'
			$widgets->{'filter_tree'} = new Gtk::Tree;
			$widgets->{'filter_tree'}->set_selection_mode('single' );
			$widgets->{'filter_tree'}->set_view_mode('line' );
			$widgets->{'filter_tree'}->set_view_lines(1 );
			$forms->{'mainwin'}{'filter_frame'}->add($widgets->{'filter_tree'} );
			$widgets->{'filter_tree'}->show;
			$forms->{'mainwin'}{'filter_tree'} = $widgets->{'filter_tree'};
		    $forms->{'mainwin'}{'vbox2'}->set_child_packing($forms->{'mainwin'}{'filter_frame'}, 1, 1, 0, 'start' );
		    #
		    # Construct a GtkVBox 'vbox4'
		    $widgets->{'vbox4'} = new Gtk::VBox(0, 0 );
		    $forms->{'mainwin'}{'vbox2'}->add($widgets->{'vbox4'} );
		    $widgets->{'vbox4'}->show;
		    $forms->{'mainwin'}{'vbox4'} = $widgets->{'vbox4'};
			#
			# Construct a GtkHBox 'hbox4'
			$widgets->{'hbox4'} = new Gtk::HBox(0, 0 );
			$forms->{'mainwin'}{'vbox4'}->add($widgets->{'hbox4'} );
			$widgets->{'hbox4'}->show;
			$forms->{'mainwin'}{'hbox4'} = $widgets->{'hbox4'};
			    #
			    # Construct a GtkEntry 'filter_entry'
			    $widgets->{'filter_entry'} = new Gtk::Entry;
			    $forms->{'mainwin'}{'hbox4'}->add($widgets->{'filter_entry'} );
			    $widgets->{'filter_entry'}->show;
			    $forms->{'mainwin'}{'filter_entry'} = $widgets->{'filter_entry'};
			    $forms->{'mainwin'}{'filter_entry'}->can_focus(1 );
			    $forms->{'mainwin'}{'filter_entry'}->set_text(_('') );
			    $forms->{'mainwin'}{'filter_entry'}->set_max_length(0 );
			    $forms->{'mainwin'}{'filter_entry'}->set_visibility(1 );
			    $forms->{'mainwin'}{'filter_entry'}->set_editable(1 );
			    $forms->{'mainwin'}{'hbox4'}->set_child_packing($forms->{'mainwin'}{'filter_entry'}, 0, 0, 0, 'start' );
			    #
			    # Construct a GtkHButtonBox 'hbuttonbox4'
			    $widgets->{'hbuttonbox4'} = new Gtk::HButtonBox;
			    $forms->{'mainwin'}{'hbox4'}->add($widgets->{'hbuttonbox4'} );
			    $widgets->{'hbuttonbox4'}->show;
			    $forms->{'mainwin'}{'hbuttonbox4'} = $widgets->{'hbuttonbox4'};
			    $forms->{'mainwin'}{'hbuttonbox4'}->set_layout('default_style' );
			    $forms->{'mainwin'}{'hbuttonbox4'}->set_spacing(30 );
			    $forms->{'mainwin'}{'hbuttonbox4'}->set_child_size(85, 27 );
			    $forms->{'mainwin'}{'hbuttonbox4'}->set_child_ipadding(7, 0 );
				#
				# Construct a GtkButton 'filter_button'
				$widgets->{'filter_button'} = new Gtk::Button(_('Filter'));
				$forms->{'mainwin'}{'hbuttonbox4'}->add($widgets->{'filter_button'} );
				$widgets->{'filter_button'}->show;
				$forms->{'mainwin'}{'filter_button'} = $widgets->{'filter_button'};
				$forms->{'mainwin'}{'filter_button'}->can_default(1 );
				$forms->{'mainwin'}{'filter_button'}->can_focus(1 );
				$forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'filter_button'}, _('Filter based on selected criteria.' ));
			    $forms->{'mainwin'}{'hbox4'}->set_child_packing($forms->{'mainwin'}{'hbuttonbox4'}, 0, 0, 0, 'start' );
			$forms->{'mainwin'}{'vbox4'}->set_child_packing($forms->{'mainwin'}{'hbox4'}, 1, 1, 0, 'start' );
			#
			# Construct a GtkHButtonBox 'hbuttonbox5'
			$widgets->{'hbuttonbox5'} = new Gtk::HButtonBox;
			$forms->{'mainwin'}{'vbox4'}->add($widgets->{'hbuttonbox5'} );
			$widgets->{'hbuttonbox5'}->show;
			$forms->{'mainwin'}{'hbuttonbox5'} = $widgets->{'hbuttonbox5'};
			$forms->{'mainwin'}{'hbuttonbox5'}->set_layout('default_style' );
			$forms->{'mainwin'}{'hbuttonbox5'}->set_spacing(30 );
			$forms->{'mainwin'}{'hbuttonbox5'}->set_child_size(85, 27 );
			$forms->{'mainwin'}{'hbuttonbox5'}->set_child_ipadding(7, 0 );
			    #
			    # Construct a GtkButton 'reset_button'
			    $widgets->{'reset_button'} = new Gtk::Button(_('Reset'));
			    $forms->{'mainwin'}{'hbuttonbox5'}->add($widgets->{'reset_button'} );
			    $widgets->{'reset_button'}->show;
			    $forms->{'mainwin'}{'reset_button'} = $widgets->{'reset_button'};
			    $forms->{'mainwin'}{'reset_button'}->can_default(1 );
			    $forms->{'mainwin'}{'reset_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'reset_button'}, _('Reset all filters.' ));
			$forms->{'mainwin'}{'vbox4'}->set_child_packing($forms->{'mainwin'}{'hbuttonbox5'}, 0, 0, 0, 'start' );
		    $forms->{'mainwin'}{'vbox2'}->set_child_packing($forms->{'mainwin'}{'vbox4'}, 0, 1, 0, 'start' );
		$forms->{'mainwin'}{'hbox1'}->set_child_packing($forms->{'mainwin'}{'vbox2'}, 0, 1, 0, 'start' );
		#
		# Construct a GtkVBox 'vbox3'
		$widgets->{'vbox3'} = new Gtk::VBox(0, 0 );
		$forms->{'mainwin'}{'hbox1'}->add($widgets->{'vbox3'} );
		$widgets->{'vbox3'}->show;
		$forms->{'mainwin'}{'vbox3'} = $widgets->{'vbox3'};
		    #
		    # Construct a GtkScrolledWindow 'scrolledwindow3'
		    $widgets->{'scrolledwindow3'} = new Gtk::ScrolledWindow( undef, undef);
		    $widgets->{'scrolledwindow3'}->set_policy('always', 'always' );
		    $widgets->{'scrolledwindow3'}->border_width(0 );
		    $widgets->{'scrolledwindow3'}->hscrollbar->set_update_policy('continuous' );
		    $widgets->{'scrolledwindow3'}->vscrollbar->set_update_policy('continuous' );
		    $forms->{'mainwin'}{'vbox3'}->add($widgets->{'scrolledwindow3'} );
		    $widgets->{'scrolledwindow3'}->show;
		    $forms->{'mainwin'}{'scrolledwindow3'} = $widgets->{'scrolledwindow3'};
			#
			# Construct a GtkCList 'pool_list'
			$widgets->{'pool_list'} = new Gtk::CList(9 );
			$widgets->{'pool_list'}->set_selection_mode('extended' );
			$widgets->{'pool_list'}->set_border('in' );
			$widgets->{'pool_list'}->column_titles_show;
			$widgets->{'pool_list'}->set_column_width(0, 25 );
			$widgets->{'pool_list'}->set_column_width(1, 136 );
			$widgets->{'pool_list'}->set_column_width(2, 60 );
			$widgets->{'pool_list'}->set_column_width(3, 160 );
			$widgets->{'pool_list'}->set_column_width(4, 25 );
			$widgets->{'pool_list'}->set_column_width(5, 80 );
			$widgets->{'pool_list'}->set_column_width(6, 60 );
			$widgets->{'pool_list'}->set_column_width(7, 60 );
			$widgets->{'pool_list'}->set_column_width(8, 160 );
			$forms->{'mainwin'}{'scrolledwindow3'}->add($widgets->{'pool_list'} );
			$widgets->{'pool_list'}->show;
			$forms->{'mainwin'}{'pool_list'} = $widgets->{'pool_list'};
			$forms->{'mainwin'}{'pool_list'}->can_focus(1 );
			    #
			    # Construct a GtkLabel 'label26'
			    $widgets->{'label26'} = new Gtk::Label(_('#'));
			    $widgets->{'label26'}->set_justify('center' );
			    $widgets->{'label26'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(0, $widgets->{'label26'} );
			    $widgets->{'label26'}->show;
			    $forms->{'mainwin'}{'label26'} = $widgets->{'label26'};
			    $forms->{'mainwin'}{'label26'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label27'
			    $widgets->{'label27'} = new Gtk::Label(_('Name'));
			    $widgets->{'label27'}->set_justify('center' );
			    $widgets->{'label27'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(1, $widgets->{'label27'} );
			    $widgets->{'label27'}->show;
			    $forms->{'mainwin'}{'label27'} = $widgets->{'label27'};
			    $forms->{'mainwin'}{'label27'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label28'
			    $widgets->{'label28'} = new Gtk::Label(_('Cost'));
			    $widgets->{'label28'}->set_justify('center' );
			    $widgets->{'label28'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(2, $widgets->{'label28'} );
			    $widgets->{'label28'}->show;
			    $forms->{'mainwin'}{'label28'} = $widgets->{'label28'};
			    $forms->{'mainwin'}{'label28'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label29'
			    $widgets->{'label29'} = new Gtk::Label(_('Text'));
			    $widgets->{'label29'}->set_justify('center' );
			    $widgets->{'label29'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(3, $widgets->{'label29'} );
			    $widgets->{'label29'}->show;
			    $forms->{'mainwin'}{'label29'} = $widgets->{'label29'};
			    $forms->{'mainwin'}{'label29'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label30'
			    $widgets->{'label30'} = new Gtk::Label(_('P/T'));
			    $widgets->{'label30'}->set_justify('center' );
			    $widgets->{'label30'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(4, $widgets->{'label30'} );
			    $widgets->{'label30'}->show;
			    $forms->{'mainwin'}{'label30'} = $widgets->{'label30'};
			    $forms->{'mainwin'}{'label30'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label31'
			    $widgets->{'label31'} = new Gtk::Label(_('Type'));
			    $widgets->{'label31'}->set_justify('center' );
			    $widgets->{'label31'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(5, $widgets->{'label31'} );
			    $widgets->{'label31'}->show;
			    $forms->{'mainwin'}{'label31'} = $widgets->{'label31'};
			    $forms->{'mainwin'}{'label31'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label32'
			    $widgets->{'label32'} = new Gtk::Label(_('Edition'));
			    $widgets->{'label32'}->set_justify('center' );
			    $widgets->{'label32'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(6, $widgets->{'label32'} );
			    $widgets->{'label32'}->show;
			    $forms->{'mainwin'}{'label32'} = $widgets->{'label32'};
			    $forms->{'mainwin'}{'label32'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label34'
			    $widgets->{'label34'} = new Gtk::Label(_('Color'));
			    $widgets->{'label34'}->set_justify('center' );
			    $widgets->{'label34'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(7, $widgets->{'label34'} );
			    $widgets->{'label34'}->show;
			    $forms->{'mainwin'}{'label34'} = $widgets->{'label34'};
			    $forms->{'mainwin'}{'label34'}->set_alignment(0.5, 0.5 );
			    #
			    # Construct a GtkLabel 'label36'
			    $widgets->{'label36'} = new Gtk::Label(_('Flavor'));
			    $widgets->{'label36'}->set_justify('center' );
			    $widgets->{'label36'}->set_line_wrap(0 );
			    $forms->{'mainwin'}{'pool_list'}->set_column_widget(8, $widgets->{'label36'} );
			    $widgets->{'label36'}->show;
			    $forms->{'mainwin'}{'label36'} = $widgets->{'label36'};
			    $forms->{'mainwin'}{'label36'}->set_alignment(0.5, 0.5 );
		    $forms->{'mainwin'}{'vbox3'}->set_child_packing($forms->{'mainwin'}{'scrolledwindow3'}, 1, 1, 0, 'start' );
		    #
		    # Construct a GtkHBox 'hbox3'
		    $widgets->{'hbox3'} = new Gtk::HBox(0, 0 );
		    $forms->{'mainwin'}{'vbox3'}->add($widgets->{'hbox3'} );
		    $widgets->{'hbox3'}->show;
		    $forms->{'mainwin'}{'hbox3'} = $widgets->{'hbox3'};
			#
			# Construct a GtkHButtonBox 'hbuttonbox2'
			$widgets->{'hbuttonbox2'} = new Gtk::HButtonBox;
			$forms->{'mainwin'}{'hbox3'}->add($widgets->{'hbuttonbox2'} );
			$widgets->{'hbuttonbox2'}->show;
			$forms->{'mainwin'}{'hbuttonbox2'} = $widgets->{'hbuttonbox2'};
			$forms->{'mainwin'}{'hbuttonbox2'}->set_layout('start' );
			$forms->{'mainwin'}{'hbuttonbox2'}->set_spacing(30 );
			$forms->{'mainwin'}{'hbuttonbox2'}->set_child_size(85, 27 );
			$forms->{'mainwin'}{'hbuttonbox2'}->set_child_ipadding(7, 0 );
			    #
			    # Construct a GtkButton 'in_deck_button'
			    $widgets->{'in_deck_button'} = new Gtk::Button(_('in deck'));
			    $forms->{'mainwin'}{'hbuttonbox2'}->add($widgets->{'in_deck_button'} );
			    $widgets->{'in_deck_button'}->show;
			    $forms->{'mainwin'}{'in_deck_button'} = $widgets->{'in_deck_button'};
			    $forms->{'mainwin'}{'in_deck_button'}->can_default(1 );
			    $forms->{'mainwin'}{'in_deck_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'in_deck_button'}, _('Move selected card(s) from card pool to deck.' ));
			    #
			    # Construct a GtkButton 'out_deck_button'
			    $widgets->{'out_deck_button'} = new Gtk::Button(_('out deck'));
			    $forms->{'mainwin'}{'hbuttonbox2'}->add($widgets->{'out_deck_button'} );
			    $widgets->{'out_deck_button'}->show;
			    $forms->{'mainwin'}{'out_deck_button'} = $widgets->{'out_deck_button'};
			    $forms->{'mainwin'}{'out_deck_button'}->can_default(1 );
			    $forms->{'mainwin'}{'out_deck_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'out_deck_button'}, _('Move selected card(s) from deck to card pool.' ));
			$forms->{'mainwin'}{'hbox3'}->set_child_packing($forms->{'mainwin'}{'hbuttonbox2'}, 1, 0, 0, 'start' );
			#
			# Construct a GtkHButtonBox 'hbuttonbox3'
			$widgets->{'hbuttonbox3'} = new Gtk::HButtonBox;
			$forms->{'mainwin'}{'hbox3'}->add($widgets->{'hbuttonbox3'} );
			$widgets->{'hbuttonbox3'}->show;
			$forms->{'mainwin'}{'hbuttonbox3'} = $widgets->{'hbuttonbox3'};
			$forms->{'mainwin'}{'hbuttonbox3'}->set_layout('end' );
			$forms->{'mainwin'}{'hbuttonbox3'}->set_spacing(30 );
			$forms->{'mainwin'}{'hbuttonbox3'}->set_child_size(85, 27 );
			$forms->{'mainwin'}{'hbuttonbox3'}->set_child_ipadding(7, 0 );
			    #
			    # Construct a GtkButton 'in_sb_button'
			    $widgets->{'in_sb_button'} = new Gtk::Button(_('in sb'));
			    $forms->{'mainwin'}{'hbuttonbox3'}->add($widgets->{'in_sb_button'} );
			    $widgets->{'in_sb_button'}->show;
			    $forms->{'mainwin'}{'in_sb_button'} = $widgets->{'in_sb_button'};
			    $forms->{'mainwin'}{'in_sb_button'}->can_default(1 );
			    $forms->{'mainwin'}{'in_sb_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'in_sb_button'}, _('Move selected cards from card pool to sideboard.' ));
			    #
			    # Construct a GtkButton 'out_sb_button'
			    $widgets->{'out_sb_button'} = new Gtk::Button(_('out sb'));
			    $forms->{'mainwin'}{'hbuttonbox3'}->add($widgets->{'out_sb_button'} );
			    $widgets->{'out_sb_button'}->show;
			    $forms->{'mainwin'}{'out_sb_button'} = $widgets->{'out_sb_button'};
			    $forms->{'mainwin'}{'out_sb_button'}->can_default(1 );
			    $forms->{'mainwin'}{'out_sb_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'out_sb_button'}, _('Move selected card(s) from sideboard to card pool.' ));
			$forms->{'mainwin'}{'hbox3'}->set_child_packing($forms->{'mainwin'}{'hbuttonbox3'}, 1, 0, 0, 'start' );
		    $forms->{'mainwin'}{'vbox3'}->set_child_packing($forms->{'mainwin'}{'hbox3'}, 0, 1, 0, 'start' );
		    #
		    # Construct a GtkHBox 'hbox2'
		    $widgets->{'hbox2'} = new Gtk::HBox(0, 0 );
		    $forms->{'mainwin'}{'vbox3'}->add($widgets->{'hbox2'} );
		    $widgets->{'hbox2'}->show;
		    $forms->{'mainwin'}{'hbox2'} = $widgets->{'hbox2'};
			#
			# Construct a GtkFrame 'deck_frame'
			$widgets->{'deck_frame'} = new Gtk::Frame(_('Deck: 0'));
			$widgets->{'deck_frame'}->set_label_align(0, 0 );
			$widgets->{'deck_frame'}->set_shadow_type('etched_in' );
			$forms->{'mainwin'}{'hbox2'}->add($widgets->{'deck_frame'} );
			$widgets->{'deck_frame'}->show;
			$forms->{'mainwin'}{'deck_frame'} = $widgets->{'deck_frame'};
			    #
			    # Construct a GtkScrolledWindow 'scrolledwindow5'
			    $widgets->{'scrolledwindow5'} = new Gtk::ScrolledWindow( undef, undef);
			    $widgets->{'scrolledwindow5'}->set_policy('always', 'always' );
			    $widgets->{'scrolledwindow5'}->border_width(0 );
			    $widgets->{'scrolledwindow5'}->hscrollbar->set_update_policy('continuous' );
			    $widgets->{'scrolledwindow5'}->vscrollbar->set_update_policy('continuous' );
			    $forms->{'mainwin'}{'deck_frame'}->add($widgets->{'scrolledwindow5'} );
			    $widgets->{'scrolledwindow5'}->show;
			    $forms->{'mainwin'}{'scrolledwindow5'} = $widgets->{'scrolledwindow5'};
				#
				# Construct a GtkCList 'deck_list'
				$widgets->{'deck_list'} = new Gtk::CList(2 );
				$widgets->{'deck_list'}->set_selection_mode('extended' );
				$widgets->{'deck_list'}->set_border('in' );
				$widgets->{'deck_list'}->column_titles_show;
				$widgets->{'deck_list'}->set_column_width(0, 30 );
				$widgets->{'deck_list'}->set_column_width(1, 80 );
				$forms->{'mainwin'}{'scrolledwindow5'}->add($widgets->{'deck_list'} );
				$widgets->{'deck_list'}->show;
				$forms->{'mainwin'}{'deck_list'} = $widgets->{'deck_list'};
				$forms->{'mainwin'}{'deck_list'}->can_focus(1 );
				    #
				    # Construct a GtkLabel 'label49'
				    $widgets->{'label49'} = new Gtk::Label(_('#'));
				    $widgets->{'label49'}->set_justify('center' );
				    $widgets->{'label49'}->set_line_wrap(0 );
				    $forms->{'mainwin'}{'deck_list'}->set_column_widget(0, $widgets->{'label49'} );
				    $widgets->{'label49'}->show;
				    $forms->{'mainwin'}{'label49'} = $widgets->{'label49'};
				    $forms->{'mainwin'}{'label49'}->set_alignment(0.5, 0.5 );
				    #
				    # Construct a GtkLabel 'label50'
				    $widgets->{'label50'} = new Gtk::Label(_('Name'));
				    $widgets->{'label50'}->set_justify('center' );
				    $widgets->{'label50'}->set_line_wrap(0 );
				    $forms->{'mainwin'}{'deck_list'}->set_column_widget(1, $widgets->{'label50'} );
				    $widgets->{'label50'}->show;
				    $forms->{'mainwin'}{'label50'} = $widgets->{'label50'};
				    $forms->{'mainwin'}{'label50'}->set_alignment(0.5, 0.5 );
			$forms->{'mainwin'}{'hbox2'}->set_child_packing($forms->{'mainwin'}{'deck_frame'}, 1, 1, 0, 'start' );
			#
			# Construct a GtkVButtonBox 'vbuttonbox1'
			$widgets->{'vbuttonbox1'} = new Gtk::VButtonBox;
			$forms->{'mainwin'}{'hbox2'}->add($widgets->{'vbuttonbox1'} );
			$widgets->{'vbuttonbox1'}->show;
			$forms->{'mainwin'}{'vbuttonbox1'} = $widgets->{'vbuttonbox1'};
			$forms->{'mainwin'}{'vbuttonbox1'}->set_layout('spread' );
			$forms->{'mainwin'}{'vbuttonbox1'}->set_spacing(10 );
			$forms->{'mainwin'}{'vbuttonbox1'}->set_child_size(85, 27 );
			$forms->{'mainwin'}{'vbuttonbox1'}->set_child_ipadding(7, 0 );
			    #
			    # Construct a GtkButton 'd2sb_button'
			    $widgets->{'d2sb_button'} = new Gtk::Button(_('-->'));
			    $forms->{'mainwin'}{'vbuttonbox1'}->add($widgets->{'d2sb_button'} );
			    $widgets->{'d2sb_button'}->show;
			    $forms->{'mainwin'}{'d2sb_button'} = $widgets->{'d2sb_button'};
			    $forms->{'mainwin'}{'d2sb_button'}->can_default(1 );
			    $forms->{'mainwin'}{'d2sb_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'d2sb_button'}, _('Move selected card(s) from deck to sideboard.' ));
			    #
			    # Construct a GtkButton 'sb2d_button'
			    $widgets->{'sb2d_button'} = new Gtk::Button(_('<--'));
			    $forms->{'mainwin'}{'vbuttonbox1'}->add($widgets->{'sb2d_button'} );
			    $widgets->{'sb2d_button'}->show;
			    $forms->{'mainwin'}{'sb2d_button'} = $widgets->{'sb2d_button'};
			    $forms->{'mainwin'}{'sb2d_button'}->can_default(1 );
			    $forms->{'mainwin'}{'sb2d_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'sb2d_button'}, _('Move selected card(s) from sideboard to deck.' ));
			    #
			    # Construct a GtkButton 'stats_button'
			    $widgets->{'stats_button'} = new Gtk::Button(_('Stats'));
			    $forms->{'mainwin'}{'vbuttonbox1'}->add($widgets->{'stats_button'} );
			    $widgets->{'stats_button'}->show;
			    $forms->{'mainwin'}{'stats_button'} = $widgets->{'stats_button'};
			    $forms->{'mainwin'}{'stats_button'}->can_default(1 );
			    $forms->{'mainwin'}{'stats_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'stats_button'}, _('Look at various statistics about your deck.' ));
			    #
			    # Construct a GtkButton 'add_lands_button'
			    $widgets->{'add_lands_button'} = new Gtk::Button(_('Add Lands'));
			    $forms->{'mainwin'}{'vbuttonbox1'}->add($widgets->{'add_lands_button'} );
			    $widgets->{'add_lands_button'}->show;
			    $forms->{'mainwin'}{'add_lands_button'} = $widgets->{'add_lands_button'};
			    $forms->{'mainwin'}{'add_lands_button'}->can_default(1 );
			    $forms->{'mainwin'}{'add_lands_button'}->can_focus(1 );
			    $forms->{'mainwin'}{'tooltips'}->set_tip($forms->{'mainwin'}{'add_lands_button'}, _('Add basic lands to your sideboard.' ));
			$forms->{'mainwin'}{'hbox2'}->set_child_packing($forms->{'mainwin'}{'vbuttonbox1'}, 0, 1, 0, 'start' );
			#
			# Construct a GtkFrame 'sb_frame'
			$widgets->{'sb_frame'} = new Gtk::Frame(_('Sideboard: 0'));
			$widgets->{'sb_frame'}->set_label_align(0, 0 );
			$widgets->{'sb_frame'}->set_shadow_type('etched_in' );
			$forms->{'mainwin'}{'hbox2'}->add($widgets->{'sb_frame'} );
			$widgets->{'sb_frame'}->show;
			$forms->{'mainwin'}{'sb_frame'} = $widgets->{'sb_frame'};
			    #
			    # Construct a GtkScrolledWindow 'scrolledwindow6'
			    $widgets->{'scrolledwindow6'} = new Gtk::ScrolledWindow( undef, undef);
			    $widgets->{'scrolledwindow6'}->set_policy('always', 'always' );
			    $widgets->{'scrolledwindow6'}->border_width(0 );
			    $widgets->{'scrolledwindow6'}->hscrollbar->set_update_policy('continuous' );
			    $widgets->{'scrolledwindow6'}->vscrollbar->set_update_policy('continuous' );
			    $forms->{'mainwin'}{'sb_frame'}->add($widgets->{'scrolledwindow6'} );
			    $widgets->{'scrolledwindow6'}->show;
			    $forms->{'mainwin'}{'scrolledwindow6'} = $widgets->{'scrolledwindow6'};
				#
				# Construct a GtkCList 'sb_list'
				$widgets->{'sb_list'} = new Gtk::CList(2 );
				$widgets->{'sb_list'}->set_selection_mode('extended' );
				$widgets->{'sb_list'}->set_border('in' );
				$widgets->{'sb_list'}->column_titles_show;
				$widgets->{'sb_list'}->set_column_width(0, 30 );
				$widgets->{'sb_list'}->set_column_width(1, 80 );
				$forms->{'mainwin'}{'scrolledwindow6'}->add($widgets->{'sb_list'} );
				$widgets->{'sb_list'}->show;
				$forms->{'mainwin'}{'sb_list'} = $widgets->{'sb_list'};
				$forms->{'mainwin'}{'sb_list'}->can_focus(1 );
				    #
				    # Construct a GtkLabel 'label52'
				    $widgets->{'label52'} = new Gtk::Label(_('#'));
				    $widgets->{'label52'}->set_justify('center' );
				    $widgets->{'label52'}->set_line_wrap(0 );
				    $forms->{'mainwin'}{'sb_list'}->set_column_widget(0, $widgets->{'label52'} );
				    $widgets->{'label52'}->show;
				    $forms->{'mainwin'}{'label52'} = $widgets->{'label52'};
				    $forms->{'mainwin'}{'label52'}->set_alignment(0.5, 0.5 );
				    #
				    # Construct a GtkLabel 'label53'
				    $widgets->{'label53'} = new Gtk::Label(_('Name'));
				    $widgets->{'label53'}->set_justify('center' );
				    $widgets->{'label53'}->set_line_wrap(0 );
				    $forms->{'mainwin'}{'sb_list'}->set_column_widget(1, $widgets->{'label53'} );
				    $widgets->{'label53'}->show;
				    $forms->{'mainwin'}{'label53'} = $widgets->{'label53'};
				    $forms->{'mainwin'}{'label53'}->set_alignment(0.5, 0.5 );
			$forms->{'mainwin'}{'hbox2'}->set_child_packing($forms->{'mainwin'}{'sb_frame'}, 1, 1, 0, 'start' );
		    $forms->{'mainwin'}{'vbox3'}->set_child_packing($forms->{'mainwin'}{'hbox2'}, 1, 1, 0, 'start' );
		$forms->{'mainwin'}{'hbox1'}->set_child_packing($forms->{'mainwin'}{'vbox3'}, 1, 1, 0, 'start' );
	    $forms->{'mainwin'}{'vbox1'}->set_child_packing($forms->{'mainwin'}{'hbox1'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkStatusbar 'statusbar1'
	    $widgets->{'statusbar1'} = new Gtk::Statusbar;
	    $forms->{'mainwin'}{'vbox1'}->add($widgets->{'statusbar1'} );
	    $widgets->{'statusbar1'}->show;
	    $forms->{'mainwin'}{'statusbar1'} = $widgets->{'statusbar1'};
	    $forms->{'mainwin'}{'vbox1'}->set_child_packing($forms->{'mainwin'}{'statusbar1'}, 0, 0, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'mainwin'}{'mainwin'}->signal_connect('delete_event', "$class\::on_mainwin_delete", '', 'mainwin', "mainwin-$instance" );
    $forms->{'mainwin'}{'deck_with_unlimited_cardpool1'}->signal_connect('activate', "$class\::on_deck_with_unlimited_cardpool1_activate", '', 'deck_with_unlimited_cardpool1', "mainwin-$instance" );
    $forms->{'mainwin'}{'deck_with_this_cardpool1'}->signal_connect('activate', "$class\::on_deck_with_this_cardpool1_activate", '', 'deck_with_this_cardpool1', "mainwin-$instance" );
    $forms->{'mainwin'}{'deck1'}->signal_connect('activate', "$class\::on_import_deck_activate", '', 'deck1', "mainwin-$instance" );
    $forms->{'mainwin'}{'card_pool1'}->signal_connect('activate', "$class\::on_import_card_pool_activate", '', 'card_pool1', "mainwin-$instance" );
    $forms->{'mainwin'}{'deck2'}->signal_connect('activate', "$class\::on_export_deck_activate", '', 'deck2', "mainwin-$instance" );
    $forms->{'mainwin'}{'card_pool2'}->signal_connect('activate', "$class\::on_export_card_pool_activate", '', 'card_pool2', "mainwin-$instance" );
    $forms->{'mainwin'}{'generate_sealed_deck1'}->signal_connect('activate', "$class\::on_generate_sealed_deck1_activate", '', 'generate_sealed_deck1', "mainwin-$instance" );
    $forms->{'mainwin'}{'quit1'}->signal_connect('activate', "$class\::on_quit1_activate", '', 'quit1', "mainwin-$instance" );
    $forms->{'mainwin'}{'filter_button'}->signal_connect('clicked', "$class\::filter_clicked", '', 'filter_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'reset_button'}->signal_connect('clicked', "$class\::reset_clicked", '', 'reset_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'pool_list'}->signal_connect('button_press_event', "$class\::on_pool_list_button_press_event", '', 'pool_list', "mainwin-$instance" );
    $forms->{'mainwin'}{'pool_list'}->signal_connect('click_column', "$class\::on_pool_list_click_column", '', 'pool_list', "mainwin-$instance" );
    $forms->{'mainwin'}{'in_deck_button'}->signal_connect('clicked', "$class\::in_deck_clicked", '', 'in_deck_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'out_deck_button'}->signal_connect('clicked', "$class\::out_deck_clicked", '', 'out_deck_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'in_sb_button'}->signal_connect('clicked', "$class\::in_sb_clicked", '', 'in_sb_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'out_sb_button'}->signal_connect('clicked', "$class\::out_sb_clicked", '', 'out_sb_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'deck_list'}->signal_connect('button_press_event', "$class\::on_pool_list_button_press_event", '', 'deck_list', "mainwin-$instance" );
    $forms->{'mainwin'}{'d2sb_button'}->signal_connect('clicked', "$class\::d2sb_clicked", '', 'd2sb_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'sb2d_button'}->signal_connect('clicked', "$class\::sb2d_clicked", '', 'sb2d_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'stats_button'}->signal_connect('clicked', "$class\::on_stats_button_clicked", '', 'stats_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'add_lands_button'}->signal_connect('clicked', "$class\::on_add_lands_button_clicked", '', 'add_lands_button', "mainwin-$instance" );
    $forms->{'mainwin'}{'sb_list'}->signal_connect('button_press_event', "$class\::on_pool_list_button_press_event", '', 'sb_list', "mainwin-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'mainwin'});
    $self->TOPLEVEL($self->FORM->{'mainwin'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("mainwin-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'deck_export_selection' class                              
#==============================================================================
package deck_export_selection;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'deck_export_selection' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_deck_export_cancel_clicked' => undef,
    'on_deck_export_ok_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"deck_export_selection-$instance"}) {$instance++;}


    #
    # Construct a GtkFileSelection 'deck_export_selection'
    $widgets->{'deck_export_selection'} = new Gtk::FileSelection(_('Select Filename') );
    $widgets->{'deck_export_selection'}->show_fileop_buttons;
    $widgets->{'deck_export_selection'}->set_position('none' );
    $widgets->{'deck_export_selection'}->set_policy(0, 1, 0 );
    $widgets->{'deck_export_selection'}->set_modal(1 );
    $widgets->{'deck_export_selection'}->realize;
    $forms->{'deck_export_selection'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'deck_export_selection'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'deck_export_selection'}{'accelgroup'}->attach($widgets->{'deck_export_selection'} );
    $forms->{'deck_export_selection'}{'deck_export_selection'} = $widgets->{'deck_export_selection'};
    $forms->{'deck_export_selection'}{'deck_export_selection'}->border_width(10 );
	#
	# Construct a GtkButton 'deck_export_ok'
	$widgets->{'deck_export_ok'} = $forms->{'deck_export_selection'}{'deck_export_selection'}->ok_button;
	$widgets->{'deck_export_ok'}->child->set_text(_('OK'));
	$widgets->{'deck_export_ok'}->show;
	$forms->{'deck_export_selection'}{'deck_export_ok'} = $widgets->{'deck_export_ok'};
	$forms->{'deck_export_selection'}{'deck_export_ok'}->can_default(1 );
	$forms->{'deck_export_selection'}{'deck_export_ok'}->can_focus(1 );
	#
	# Construct a GtkButton 'deck_export_cancel'
	$widgets->{'deck_export_cancel'} = $forms->{'deck_export_selection'}{'deck_export_selection'}->cancel_button;
	$widgets->{'deck_export_cancel'}->child->set_text(_('Cancel'));
	$widgets->{'deck_export_cancel'}->show;
	$forms->{'deck_export_selection'}{'deck_export_cancel'} = $widgets->{'deck_export_cancel'};
	$forms->{'deck_export_selection'}{'deck_export_cancel'}->can_default(1 );
	$forms->{'deck_export_selection'}{'deck_export_cancel'}->can_focus(1 );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'deck_export_selection'}{'deck_export_ok'}->signal_connect('clicked', "$class\::on_deck_export_ok_clicked", '', 'deck_export_ok', "deck_export_selection-$instance" );
    $forms->{'deck_export_selection'}{'deck_export_cancel'}->signal_connect('clicked', "$class\::on_deck_export_cancel_clicked", '', 'deck_export_cancel', "deck_export_selection-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'deck_export_selection'});
    $self->TOPLEVEL($self->FORM->{'deck_export_selection'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("deck_export_selection-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'deck_selection' class                              
#==============================================================================
package deck_selection;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'deck_selection' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_deck_cancel_clicked' => undef,
    'on_deck_ok_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"deck_selection-$instance"}) {$instance++;}


    #
    # Construct a GtkFileSelection 'deck_selection'
    $widgets->{'deck_selection'} = new Gtk::FileSelection(_('Select Deck') );
    $widgets->{'deck_selection'}->show_fileop_buttons;
    $widgets->{'deck_selection'}->set_position('none' );
    $widgets->{'deck_selection'}->set_policy(0, 1, 0 );
    $widgets->{'deck_selection'}->set_modal(1 );
    $widgets->{'deck_selection'}->realize;
    $forms->{'deck_selection'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'deck_selection'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'deck_selection'}{'accelgroup'}->attach($widgets->{'deck_selection'} );
    $forms->{'deck_selection'}{'deck_selection'} = $widgets->{'deck_selection'};
    $forms->{'deck_selection'}{'deck_selection'}->border_width(10 );
	#
	# Construct a GtkButton 'deck_ok'
	$widgets->{'deck_ok'} = $forms->{'deck_selection'}{'deck_selection'}->ok_button;
	$widgets->{'deck_ok'}->child->set_text(_('OK'));
	$widgets->{'deck_ok'}->show;
	$forms->{'deck_selection'}{'deck_ok'} = $widgets->{'deck_ok'};
	$forms->{'deck_selection'}{'deck_ok'}->can_default(1 );
	$forms->{'deck_selection'}{'deck_ok'}->can_focus(1 );
	#
	# Construct a GtkButton 'deck_cancel'
	$widgets->{'deck_cancel'} = $forms->{'deck_selection'}{'deck_selection'}->cancel_button;
	$widgets->{'deck_cancel'}->child->set_text(_('Cancel'));
	$widgets->{'deck_cancel'}->show;
	$forms->{'deck_selection'}{'deck_cancel'} = $widgets->{'deck_cancel'};
	$forms->{'deck_selection'}{'deck_cancel'}->can_default(1 );
	$forms->{'deck_selection'}{'deck_cancel'}->can_focus(1 );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'deck_selection'}{'deck_ok'}->signal_connect('clicked', "$class\::on_deck_ok_clicked", '', 'deck_ok', "deck_selection-$instance" );
    $forms->{'deck_selection'}{'deck_cancel'}->signal_connect('clicked', "$class\::on_deck_cancel_clicked", '', 'deck_cancel', "deck_selection-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'deck_selection'});
    $self->TOPLEVEL($self->FORM->{'deck_selection'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("deck_selection-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'landwin' class                              
#==============================================================================
package landwin;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'landwin' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_forest_button_clicked' => undef,
    'on_island_button_clicked' => undef,
    'on_land_dismiss_button_clicked' => undef,
    'on_mountain_button_clicked' => undef,
    'on_plains_button_clicked' => undef,
    'on_swamp_button_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"landwin-$instance"}) {$instance++;}


    #
    # Construct a GtkWindow 'landwin'
    $widgets->{'landwin'} = new Gtk::Window;
    $widgets->{'landwin'}->set_title(_('Add Basic Lands') );
    $widgets->{'landwin'}->set_position('none' );
    $widgets->{'landwin'}->set_policy(0, 1, 0 );
    $widgets->{'landwin'}->set_modal(0 );
    $widgets->{'landwin'}->realize;
    $forms->{'landwin'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'landwin'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'landwin'}{'accelgroup'}->attach($widgets->{'landwin'} );
    $forms->{'landwin'}{'landwin'} = $widgets->{'landwin'};
	#
	# Construct a GtkVBox 'vbox5'
	$widgets->{'vbox5'} = new Gtk::VBox(0, 0 );
	$forms->{'landwin'}{'landwin'}->add($widgets->{'vbox5'} );
	$widgets->{'vbox5'}->show;
	$forms->{'landwin'}{'vbox5'} = $widgets->{'vbox5'};
	    #
	    # Construct a GtkHButtonBox 'hbuttonbox7'
	    $widgets->{'hbuttonbox7'} = new Gtk::HButtonBox;
	    $forms->{'landwin'}{'vbox5'}->add($widgets->{'hbuttonbox7'} );
	    $widgets->{'hbuttonbox7'}->show;
	    $forms->{'landwin'}{'hbuttonbox7'} = $widgets->{'hbuttonbox7'};
	    $forms->{'landwin'}{'hbuttonbox7'}->set_layout('default_style' );
	    $forms->{'landwin'}{'hbuttonbox7'}->set_spacing(30 );
	    $forms->{'landwin'}{'hbuttonbox7'}->set_child_size(85, 27 );
	    $forms->{'landwin'}{'hbuttonbox7'}->set_child_ipadding(7, 0 );
		#
		# Construct a GtkButton 'plains_button'
		$widgets->{'plains_button'} = new Gtk::Button(_('Plains'));
		$forms->{'landwin'}{'hbuttonbox7'}->add($widgets->{'plains_button'} );
		$widgets->{'plains_button'}->show;
		$forms->{'landwin'}{'plains_button'} = $widgets->{'plains_button'};
		$forms->{'landwin'}{'plains_button'}->can_default(1 );
		$forms->{'landwin'}{'plains_button'}->can_focus(1 );
		$forms->{'landwin'}{'tooltips'}->set_tip($forms->{'landwin'}{'plains_button'}, _('Add a Plains to your sideboard.' ));
		#
		# Construct a GtkButton 'island_button'
		$widgets->{'island_button'} = new Gtk::Button(_('Island'));
		$forms->{'landwin'}{'hbuttonbox7'}->add($widgets->{'island_button'} );
		$widgets->{'island_button'}->show;
		$forms->{'landwin'}{'island_button'} = $widgets->{'island_button'};
		$forms->{'landwin'}{'island_button'}->can_default(1 );
		$forms->{'landwin'}{'island_button'}->can_focus(1 );
		$forms->{'landwin'}{'tooltips'}->set_tip($forms->{'landwin'}{'island_button'}, _('Add an Island to your sideboard.' ));
		#
		# Construct a GtkButton 'forest_button'
		$widgets->{'forest_button'} = new Gtk::Button(_('Forest'));
		$forms->{'landwin'}{'hbuttonbox7'}->add($widgets->{'forest_button'} );
		$widgets->{'forest_button'}->show;
		$forms->{'landwin'}{'forest_button'} = $widgets->{'forest_button'};
		$forms->{'landwin'}{'forest_button'}->can_default(1 );
		$forms->{'landwin'}{'forest_button'}->can_focus(1 );
		$forms->{'landwin'}{'tooltips'}->set_tip($forms->{'landwin'}{'forest_button'}, _('Add a Forest to your sideboard.' ));
		#
		# Construct a GtkButton 'swamp_button'
		$widgets->{'swamp_button'} = new Gtk::Button(_('Swamp'));
		$forms->{'landwin'}{'hbuttonbox7'}->add($widgets->{'swamp_button'} );
		$widgets->{'swamp_button'}->show;
		$forms->{'landwin'}{'swamp_button'} = $widgets->{'swamp_button'};
		$forms->{'landwin'}{'swamp_button'}->can_default(1 );
		$forms->{'landwin'}{'swamp_button'}->can_focus(1 );
		$forms->{'landwin'}{'tooltips'}->set_tip($forms->{'landwin'}{'swamp_button'}, _('Add a Swamp to your sideboard.' ));
		#
		# Construct a GtkButton 'mountain_button'
		$widgets->{'mountain_button'} = new Gtk::Button(_('Mountain'));
		$forms->{'landwin'}{'hbuttonbox7'}->add($widgets->{'mountain_button'} );
		$widgets->{'mountain_button'}->show;
		$forms->{'landwin'}{'mountain_button'} = $widgets->{'mountain_button'};
		$forms->{'landwin'}{'mountain_button'}->can_default(1 );
		$forms->{'landwin'}{'mountain_button'}->can_focus(1 );
		$forms->{'landwin'}{'tooltips'}->set_tip($forms->{'landwin'}{'mountain_button'}, _('Add a Mountain to your sideboard.' ));
	    $forms->{'landwin'}{'vbox5'}->set_child_packing($forms->{'landwin'}{'hbuttonbox7'}, 1, 1, 0, 'start' );
	    #
	    # Construct a GtkHButtonBox 'hbuttonbox6'
	    $widgets->{'hbuttonbox6'} = new Gtk::HButtonBox;
	    $forms->{'landwin'}{'vbox5'}->add($widgets->{'hbuttonbox6'} );
	    $widgets->{'hbuttonbox6'}->show;
	    $forms->{'landwin'}{'hbuttonbox6'} = $widgets->{'hbuttonbox6'};
	    $forms->{'landwin'}{'hbuttonbox6'}->set_layout('default_style' );
	    $forms->{'landwin'}{'hbuttonbox6'}->set_spacing(30 );
	    $forms->{'landwin'}{'hbuttonbox6'}->set_child_size(85, 27 );
	    $forms->{'landwin'}{'hbuttonbox6'}->set_child_ipadding(7, 0 );
		#
		# Construct a GtkButton 'land_dismiss_button'
		$widgets->{'land_dismiss_button'} = new Gtk::Button(_('Dismiss'));
		$forms->{'landwin'}{'hbuttonbox6'}->add($widgets->{'land_dismiss_button'} );
		$widgets->{'land_dismiss_button'}->show;
		$forms->{'landwin'}{'land_dismiss_button'} = $widgets->{'land_dismiss_button'};
		$forms->{'landwin'}{'land_dismiss_button'}->can_default(1 );
		$forms->{'landwin'}{'land_dismiss_button'}->can_focus(1 );
		$forms->{'landwin'}{'tooltips'}->set_tip($forms->{'landwin'}{'land_dismiss_button'}, _('Dismiss this dialog.' ));
	    $forms->{'landwin'}{'vbox5'}->set_child_packing($forms->{'landwin'}{'hbuttonbox6'}, 1, 1, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'landwin'}{'plains_button'}->signal_connect('clicked', "$class\::on_plains_button_clicked", '', 'plains_button', "landwin-$instance" );
    $forms->{'landwin'}{'island_button'}->signal_connect('clicked', "$class\::on_island_button_clicked", '', 'island_button', "landwin-$instance" );
    $forms->{'landwin'}{'forest_button'}->signal_connect('clicked', "$class\::on_forest_button_clicked", '', 'forest_button', "landwin-$instance" );
    $forms->{'landwin'}{'swamp_button'}->signal_connect('clicked', "$class\::on_swamp_button_clicked", '', 'swamp_button', "landwin-$instance" );
    $forms->{'landwin'}{'mountain_button'}->signal_connect('clicked', "$class\::on_mountain_button_clicked", '', 'mountain_button', "landwin-$instance" );
    $forms->{'landwin'}{'land_dismiss_button'}->signal_connect('clicked', "$class\::on_land_dismiss_button_clicked", '', 'land_dismiss_button', "landwin-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'landwin'});
    $self->TOPLEVEL($self->FORM->{'landwin'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("landwin-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'save_dialog' class                              
#==============================================================================
package save_dialog;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'save_dialog' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_save_dialog_cancel_clicked' => undef,
    'on_save_dialog_no_clicked' => undef,
    'on_save_dialog_yes_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"save_dialog-$instance"}) {$instance++;}


    #
    # Construct a GtkDialog 'save_dialog'
    $widgets->{'save_dialog'} = new Gtk::Dialog;
    $widgets->{'save_dialog'}->set_title(_('Your deck is unsaved!') );
    $widgets->{'save_dialog'}->set_position('none' );
    $widgets->{'save_dialog'}->set_policy(1, 1, 0 );
    $widgets->{'save_dialog'}->set_modal(1 );
    $widgets->{'save_dialog'}->realize;
    $forms->{'save_dialog'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'save_dialog'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'save_dialog'}{'accelgroup'}->attach($widgets->{'save_dialog'} );
    $forms->{'save_dialog'}{'save_dialog'} = $widgets->{'save_dialog'};
	#
	# Construct a GtkVBox 'dialog-vbox3'
	$widgets->{'dialog-vbox3'} = $forms->{'save_dialog'}{'save_dialog'}->vbox;
	$widgets->{'dialog-vbox3'}->show;
	$forms->{'save_dialog'}{'dialog-vbox3'} = $widgets->{'dialog-vbox3'};
	    #
	    # Construct a GtkHBox 'dialog-action_area3'
	    $widgets->{'dialog-action_area3'} = $forms->{'save_dialog'}{'save_dialog'}->action_area;
	    $widgets->{'dialog-action_area3'}->show;
	    $forms->{'save_dialog'}{'dialog-action_area3'} = $widgets->{'dialog-action_area3'};
	    $forms->{'save_dialog'}{'dialog-action_area3'}->border_width(10 );
		#
		# Construct a GtkHButtonBox 'hbuttonbox10'
		$widgets->{'hbuttonbox10'} = new Gtk::HButtonBox;
		$forms->{'save_dialog'}{'dialog-action_area3'}->add($widgets->{'hbuttonbox10'} );
		$widgets->{'hbuttonbox10'}->show;
		$forms->{'save_dialog'}{'hbuttonbox10'} = $widgets->{'hbuttonbox10'};
		$forms->{'save_dialog'}{'hbuttonbox10'}->set_layout('default_style' );
		$forms->{'save_dialog'}{'hbuttonbox10'}->set_spacing(30 );
		$forms->{'save_dialog'}{'hbuttonbox10'}->set_child_size(85, 27 );
		$forms->{'save_dialog'}{'hbuttonbox10'}->set_child_ipadding(7, 0 );
		    #
		    # Construct a GtkButton 'save_dialog_yes'
		    $widgets->{'save_dialog_yes'} = new Gtk::Button(_('Yes'));
		    $forms->{'save_dialog'}{'hbuttonbox10'}->add($widgets->{'save_dialog_yes'} );
		    $widgets->{'save_dialog_yes'}->show;
		    $forms->{'save_dialog'}{'save_dialog_yes'} = $widgets->{'save_dialog_yes'};
		    $forms->{'save_dialog'}{'save_dialog_yes'}->can_default(1 );
		    $forms->{'save_dialog'}{'save_dialog_yes'}->can_focus(1 );
		    #
		    # Construct a GtkButton 'save_dialog_no'
		    $widgets->{'save_dialog_no'} = new Gtk::Button(_('No'));
		    $forms->{'save_dialog'}{'hbuttonbox10'}->add($widgets->{'save_dialog_no'} );
		    $widgets->{'save_dialog_no'}->show;
		    $forms->{'save_dialog'}{'save_dialog_no'} = $widgets->{'save_dialog_no'};
		    $forms->{'save_dialog'}{'save_dialog_no'}->can_default(1 );
		    $forms->{'save_dialog'}{'save_dialog_no'}->can_focus(1 );
		    #
		    # Construct a GtkButton 'save_dialog_cancel'
		    $widgets->{'save_dialog_cancel'} = new Gtk::Button(_('Cancel'));
		    $forms->{'save_dialog'}{'hbuttonbox10'}->add($widgets->{'save_dialog_cancel'} );
		    $widgets->{'save_dialog_cancel'}->show;
		    $forms->{'save_dialog'}{'save_dialog_cancel'} = $widgets->{'save_dialog_cancel'};
		    $forms->{'save_dialog'}{'save_dialog_cancel'}->can_default(1 );
		    $forms->{'save_dialog'}{'save_dialog_cancel'}->can_focus(1 );
		$forms->{'save_dialog'}{'dialog-action_area3'}->set_child_packing($forms->{'save_dialog'}{'hbuttonbox10'}, 1, 1, 0, 'start' );
	    $forms->{'save_dialog'}{'dialog-vbox3'}->set_child_packing($forms->{'save_dialog'}{'dialog-action_area3'}, 0, 1, 0, 'end' );
	    #
	    # Construct a GtkLabel 'label60'
	    $widgets->{'label60'} = new Gtk::Label(_('

The currently loaded deck has not been saved.

Would you like to save it now?

'));
	    $widgets->{'label60'}->set_justify('center' );
	    $widgets->{'label60'}->set_line_wrap(0 );
	    $forms->{'save_dialog'}{'dialog-vbox3'}->add($widgets->{'label60'} );
	    $widgets->{'label60'}->show;
	    $forms->{'save_dialog'}{'label60'} = $widgets->{'label60'};
	    $forms->{'save_dialog'}{'label60'}->set_alignment(0.5, 0.5 );
	    $forms->{'save_dialog'}{'dialog-vbox3'}->set_child_packing($forms->{'save_dialog'}{'label60'}, 0, 0, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'save_dialog'}{'save_dialog_yes'}->signal_connect('clicked', "$class\::on_save_dialog_yes_clicked", '', 'save_dialog_yes', "save_dialog-$instance" );
    $forms->{'save_dialog'}{'save_dialog_no'}->signal_connect('clicked', "$class\::on_save_dialog_no_clicked", '', 'save_dialog_no', "save_dialog-$instance" );
    $forms->{'save_dialog'}{'save_dialog_cancel'}->signal_connect('clicked', "$class\::on_save_dialog_cancel_clicked", '', 'save_dialog_cancel', "save_dialog-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'save_dialog'});
    $self->TOPLEVEL($self->FORM->{'save_dialog'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("save_dialog-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'error_dialog' class                              
#==============================================================================
package error_dialog;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'error_dialog' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_error_dialog_dismiss_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"error_dialog-$instance"}) {$instance++;}


    #
    # Construct a GtkDialog 'error_dialog'
    $widgets->{'error_dialog'} = new Gtk::Dialog;
    $widgets->{'error_dialog'}->set_title(_('Error') );
    $widgets->{'error_dialog'}->set_position('none' );
    $widgets->{'error_dialog'}->set_policy(1, 1, 0 );
    $widgets->{'error_dialog'}->set_modal(1 );
    $widgets->{'error_dialog'}->set_default_size(320, 260 );
    $widgets->{'error_dialog'}->realize;
    $forms->{'error_dialog'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'error_dialog'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'error_dialog'}{'accelgroup'}->attach($widgets->{'error_dialog'} );
    $forms->{'error_dialog'}{'error_dialog'} = $widgets->{'error_dialog'};
	#
	# Construct a GtkVBox 'dialog-vbox2'
	$widgets->{'dialog-vbox2'} = $forms->{'error_dialog'}{'error_dialog'}->vbox;
	$widgets->{'dialog-vbox2'}->show;
	$forms->{'error_dialog'}{'dialog-vbox2'} = $widgets->{'dialog-vbox2'};
	    #
	    # Construct a GtkHBox 'dialog-action_area2'
	    $widgets->{'dialog-action_area2'} = $forms->{'error_dialog'}{'error_dialog'}->action_area;
	    $widgets->{'dialog-action_area2'}->show;
	    $forms->{'error_dialog'}{'dialog-action_area2'} = $widgets->{'dialog-action_area2'};
	    $forms->{'error_dialog'}{'dialog-action_area2'}->border_width(10 );
		#
		# Construct a GtkButton 'error_dialog_dismiss'
		$widgets->{'error_dialog_dismiss'} = new Gtk::Button(_('Dismiss'));
		$forms->{'error_dialog'}{'dialog-action_area2'}->add($widgets->{'error_dialog_dismiss'} );
		$widgets->{'error_dialog_dismiss'}->show;
		$forms->{'error_dialog'}{'error_dialog_dismiss'} = $widgets->{'error_dialog_dismiss'};
		$forms->{'error_dialog'}{'error_dialog_dismiss'}->can_focus(1 );
		$forms->{'error_dialog'}{'dialog-action_area2'}->set_child_packing($forms->{'error_dialog'}{'error_dialog_dismiss'}, 0, 1, 0, 'start' );
	    $forms->{'error_dialog'}{'dialog-vbox2'}->set_child_packing($forms->{'error_dialog'}{'dialog-action_area2'}, 0, 1, 0, 'end' );
	    #
	    # Construct a GtkLabel 'error_dialog_label'
	    $widgets->{'error_dialog_label'} = new Gtk::Label(_('label59'));
	    $widgets->{'error_dialog_label'}->set_justify('center' );
	    $widgets->{'error_dialog_label'}->set_line_wrap(1 );
	    $forms->{'error_dialog'}{'dialog-vbox2'}->add($widgets->{'error_dialog_label'} );
	    $widgets->{'error_dialog_label'}->show;
	    $forms->{'error_dialog'}{'error_dialog_label'} = $widgets->{'error_dialog_label'};
	    $forms->{'error_dialog'}{'error_dialog_label'}->set_alignment(0.5, 0.5 );
	    $forms->{'error_dialog'}{'dialog-vbox2'}->set_child_packing($forms->{'error_dialog'}{'error_dialog_label'}, 1, 1, 0, 'start' );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'error_dialog'}{'error_dialog_dismiss'}->signal_connect('clicked', "$class\::on_error_dialog_dismiss_clicked", '', 'error_dialog_dismiss', "error_dialog-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'error_dialog'});
    $self->TOPLEVEL($self->FORM->{'error_dialog'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("error_dialog-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new









#==============================================================================
#=== This is the 'pool_export_selection' class                              
#==============================================================================
package pool_export_selection;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'pool_export_selection' (version 0.01)
# 
# Copyright (c) Date Mon Sep 22 04:30:29 GMT 2003
# Author mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
# Unspecified copying policy, please contact the author
# mpd <vega@roc-66-67-55-11.rochester.rr.com>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.61 - Sun Nov 17 03:21:11 GMT 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /usr/home/vega/Decked/decked.glade
# Tue Sep 30 02:53:33 GMT 2003
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'GUI';
    $VERSION = '0.01';
    $AUTHOR  = 'mpd <vega@roc-66-67-55-11.rochester.rr.com>';
    $DATE    = 'Mon Sep 22 04:30:29 GMT 2003';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/usr/home/vega/Decked/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'GUI',
    VERSION  => '0.01',
    AUTHOR   => 'mpd <vega@roc-66-67-55-11.rochester.rr.com>',
    DATE     => 'Mon Sep 22 04:30:29 GMT 2003',
    INSTANCE => 'mainwin',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_pool_export_cancel_clicked' => undef,
    'on_pool_export_ok_clicked' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('GUI');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/fr/LC_MESSAGES/GUI.mo)
#    $class->load_translations('GUI', 'test', undef, '/usr/home/vega/Decked/ppo/GUI.mo');
    Gtk->init;
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"pool_export_selection-$instance"}) {$instance++;}


    #
    # Construct a GtkFileSelection 'pool_export_selection'
    $widgets->{'pool_export_selection'} = new Gtk::FileSelection(_('Select Filename') );
    $widgets->{'pool_export_selection'}->show_fileop_buttons;
    $widgets->{'pool_export_selection'}->set_position('none' );
    $widgets->{'pool_export_selection'}->set_policy(0, 1, 0 );
    $widgets->{'pool_export_selection'}->set_modal(1 );
    $widgets->{'pool_export_selection'}->realize;
    $forms->{'pool_export_selection'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'pool_export_selection'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'pool_export_selection'}{'accelgroup'}->attach($widgets->{'pool_export_selection'} );
    $forms->{'pool_export_selection'}{'pool_export_selection'} = $widgets->{'pool_export_selection'};
    $forms->{'pool_export_selection'}{'pool_export_selection'}->border_width(10 );
	#
	# Construct a GtkButton 'pool_export_ok'
	$widgets->{'pool_export_ok'} = $forms->{'pool_export_selection'}{'pool_export_selection'}->ok_button;
	$widgets->{'pool_export_ok'}->child->set_text(_('OK'));
	$widgets->{'pool_export_ok'}->show;
	$forms->{'pool_export_selection'}{'pool_export_ok'} = $widgets->{'pool_export_ok'};
	$forms->{'pool_export_selection'}{'pool_export_ok'}->can_default(1 );
	$forms->{'pool_export_selection'}{'pool_export_ok'}->can_focus(1 );
	#
	# Construct a GtkButton 'pool_export_cancel'
	$widgets->{'pool_export_cancel'} = $forms->{'pool_export_selection'}{'pool_export_selection'}->cancel_button;
	$widgets->{'pool_export_cancel'}->child->set_text(_('Cancel'));
	$widgets->{'pool_export_cancel'}->show;
	$forms->{'pool_export_selection'}{'pool_export_cancel'} = $widgets->{'pool_export_cancel'};
	$forms->{'pool_export_selection'}{'pool_export_cancel'}->can_default(1 );
	$forms->{'pool_export_selection'}{'pool_export_cancel'}->can_focus(1 );
    #
    # Connect all signals now that widgets are constructed
    $forms->{'pool_export_selection'}{'pool_export_ok'}->signal_connect('clicked', "$class\::on_pool_export_ok_clicked", '', 'pool_export_ok', "pool_export_selection-$instance" );
    $forms->{'pool_export_selection'}{'pool_export_cancel'}->signal_connect('clicked', "$class\::on_pool_export_cancel_clicked", '', 'pool_export_cancel', "pool_export_selection-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'pool_export_selection'});
    $self->TOPLEVEL($self->FORM->{'pool_export_selection'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("pool_export_selection-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new










1;

__END__

#===============================================================================
#==== Documentation
#===============================================================================
=pod

=head1 NAME

GUI - version 0.01 Mon Sep 22 04:30:29 GMT 2003

No description

=head1 SYNOPSIS

 use GUI;

 To construct the window object and show it call
 
 Gtk->init;
 my $window = mainwin->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 mainwin->app_run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

mpd <vega@roc-66-67-55-11.rochester.rr.com>

=cut
